{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/PinakShome/Deep_Learning/blob/main/PII_DETECTION/Colab_PII_D\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "55985d04",
      "metadata": {
        "id": "55985d04"
      },
      "source": [
        "<h1> Importing Libraries and Exploring Data"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "id": "1ed07509",
      "metadata": {
        "id": "1ed07509"
      },
      "outputs": [],
      "source": [
        "import transformers\n",
        "import torch"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "id": "ffc9d8e9",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ffc9d8e9",
        "outputId": "3ae21c22-c6a9-47a8-dad3-a86d93d4efda"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Drive already mounted at /content/gdrive; to attempt to forcibly remount, call drive.mount(\"/content/gdrive\", force_remount=True).\n"
          ]
        }
      ],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import warnings\n",
        "import nltk\n",
        "from nltk.tokenize import word_tokenize\n",
        "from nltk.corpus import stopwords\n",
        "from wordcloud import WordCloud\n",
        "import matplotlib.pyplot as plt\n",
        "warnings.filterwarnings('ignore')\n",
        "import sys\n",
        "from google.colab import drive\n",
        "drive.mount('/content/gdrive')"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "a28111c3",
      "metadata": {
        "id": "a28111c3"
      },
      "source": [
        "<h2> Input"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "id": "ac43ac91",
      "metadata": {
        "id": "ac43ac91"
      },
      "outputs": [],
      "source": [
        "#Reading in the files\n",
        "df=pd.read_json('gdrive/My Drive/pii-detection/train.json')"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "6807639d",
      "metadata": {
        "id": "6807639d"
      },
      "source": [
        "<h1> Pre-EDA"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 4,
      "id": "f6cc1384",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 289
        },
        "id": "f6cc1384",
        "outputId": "78f3b5f4-8d01-4f1f-ee22-73efdd82ff04"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   document                                          full_text  \\\n",
              "0         7  Design Thinking for innovation reflexion-Avril...   \n",
              "1        10  Diego Estrada\\n\\nDesign Thinking Assignment\\n\\...   \n",
              "2        16  Reporting process\\n\\nby Gilberto Gamboa\\n\\nCha...   \n",
              "3        20  Design Thinking for Innovation\\n\\nSindy Samaca...   \n",
              "4        56  Assignment:  Visualization Reflection  Submitt...   \n",
              "\n",
              "                                              tokens  \\\n",
              "0  [Design, Thinking, for, innovation, reflexion,...   \n",
              "1  [Diego, Estrada, \\n\\n, Design, Thinking, Assig...   \n",
              "2  [Reporting, process, \\n\\n, by, Gilberto, Gambo...   \n",
              "3  [Design, Thinking, for, Innovation, \\n\\n, Sind...   \n",
              "4  [Assignment, :,   , Visualization,  , Reflecti...   \n",
              "\n",
              "                                 trailing_whitespace  \\\n",
              "0  [True, True, True, True, False, False, True, F...   \n",
              "1  [True, False, False, True, True, False, False,...   \n",
              "2  [True, False, False, True, True, False, False,...   \n",
              "3  [True, True, True, False, False, True, False, ...   \n",
              "4  [False, False, False, False, False, False, Fal...   \n",
              "\n",
              "                                              labels  \n",
              "0  [O, O, O, O, O, O, O, O, O, B-NAME_STUDENT, I-...  \n",
              "1  [B-NAME_STUDENT, I-NAME_STUDENT, O, O, O, O, O...  \n",
              "2  [O, O, O, O, B-NAME_STUDENT, I-NAME_STUDENT, O...  \n",
              "3  [O, O, O, O, O, B-NAME_STUDENT, I-NAME_STUDENT...  \n",
              "4  [O, O, O, O, O, O, O, O, O, O, O, O, B-NAME_ST...  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-2731df35-9a84-4845-b910-c347f8d508aa\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>document</th>\n",
              "      <th>full_text</th>\n",
              "      <th>tokens</th>\n",
              "      <th>trailing_whitespace</th>\n",
              "      <th>labels</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>7</td>\n",
              "      <td>Design Thinking for innovation reflexion-Avril...</td>\n",
              "      <td>[Design, Thinking, for, innovation, reflexion,...</td>\n",
              "      <td>[True, True, True, True, False, False, True, F...</td>\n",
              "      <td>[O, O, O, O, O, O, O, O, O, B-NAME_STUDENT, I-...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>10</td>\n",
              "      <td>Diego Estrada\\n\\nDesign Thinking Assignment\\n\\...</td>\n",
              "      <td>[Diego, Estrada, \\n\\n, Design, Thinking, Assig...</td>\n",
              "      <td>[True, False, False, True, True, False, False,...</td>\n",
              "      <td>[B-NAME_STUDENT, I-NAME_STUDENT, O, O, O, O, O...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>16</td>\n",
              "      <td>Reporting process\\n\\nby Gilberto Gamboa\\n\\nCha...</td>\n",
              "      <td>[Reporting, process, \\n\\n, by, Gilberto, Gambo...</td>\n",
              "      <td>[True, False, False, True, True, False, False,...</td>\n",
              "      <td>[O, O, O, O, B-NAME_STUDENT, I-NAME_STUDENT, O...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>20</td>\n",
              "      <td>Design Thinking for Innovation\\n\\nSindy Samaca...</td>\n",
              "      <td>[Design, Thinking, for, Innovation, \\n\\n, Sind...</td>\n",
              "      <td>[True, True, True, False, False, True, False, ...</td>\n",
              "      <td>[O, O, O, O, O, B-NAME_STUDENT, I-NAME_STUDENT...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>56</td>\n",
              "      <td>Assignment:  Visualization Reflection  Submitt...</td>\n",
              "      <td>[Assignment, :,   , Visualization,  , Reflecti...</td>\n",
              "      <td>[False, False, False, False, False, False, Fal...</td>\n",
              "      <td>[O, O, O, O, O, O, O, O, O, O, O, O, B-NAME_ST...</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2731df35-9a84-4845-b910-c347f8d508aa')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-2731df35-9a84-4845-b910-c347f8d508aa button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-2731df35-9a84-4845-b910-c347f8d508aa');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-f0ddaaf4-e221-4e4e-8cf1-2b86abfcb632\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-f0ddaaf4-e221-4e4e-8cf1-2b86abfcb632')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-f0ddaaf4-e221-4e4e-8cf1-2b86abfcb632 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 4
        }
      ],
      "source": [
        "df.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 5,
      "id": "840f17c3",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "840f17c3",
        "outputId": "3b93351a-3785-4c2c-a4bb-f70c27ab7e67"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(6807, 5)"
            ]
          },
          "metadata": {},
          "execution_count": 5
        }
      ],
      "source": [
        "df.shape"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 6,
      "id": "a6c60f7f",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "a6c60f7f",
        "outputId": "aba326bb-6f7d-42e6-9f50-5c0f289c694a"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "document                int64\n",
              "full_text              object\n",
              "tokens                 object\n",
              "trailing_whitespace    object\n",
              "labels                 object\n",
              "dtype: object"
            ]
          },
          "metadata": {},
          "execution_count": 6
        }
      ],
      "source": [
        "df.dtypes"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 7,
      "id": "b8b083d8",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "b8b083d8",
        "outputId": "e22fda7c-3837-4d64-f876-1d088d78e29b"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[True, False, False, True, True]"
            ]
          },
          "metadata": {},
          "execution_count": 7
        }
      ],
      "source": [
        "(df['trailing_whitespace'][1][:5])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 8,
      "id": "38c4ebe9",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "38c4ebe9",
        "outputId": "3e7996c7-710a-4030-b68d-3c996fa907f3"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['B-NAME_STUDENT', 'I-NAME_STUDENT', 'O', 'O', 'O']"
            ]
          },
          "metadata": {},
          "execution_count": 8
        }
      ],
      "source": [
        "df['labels'][1][:5]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 9,
      "id": "7ea8b6e7",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7ea8b6e7",
        "outputId": "f700648f-8626-4055-a184-4ffac76c2d64"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "563"
            ]
          },
          "metadata": {},
          "execution_count": 9
        }
      ],
      "source": [
        "len(df['tokens'][1])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 10,
      "id": "d3acee8b",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "d3acee8b",
        "outputId": "dbfb6e8b-6e5f-4fa9-ad13-d2f72a456ce9"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['Diego',\n",
              " 'Estrada',\n",
              " '\\n\\n',\n",
              " 'Design',\n",
              " 'Thinking',\n",
              " 'Assignment',\n",
              " '\\n\\n',\n",
              " 'Visualization']"
            ]
          },
          "metadata": {},
          "execution_count": 10
        }
      ],
      "source": [
        "df['tokens'][1][:8]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 11,
      "id": "14f6e518",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "14f6e518",
        "outputId": "a575a400-3956-43e6-f62f-34af3d29e612"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "6807"
            ]
          },
          "metadata": {},
          "execution_count": 11
        }
      ],
      "source": [
        "len(df['full_text'])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 12,
      "id": "2380f9af",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2380f9af",
        "outputId": "9c409634-b098-4002-d415-0e8377822451"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "2915"
            ]
          },
          "metadata": {},
          "execution_count": 12
        }
      ],
      "source": [
        "len(df['full_text'][1])"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "1e377af3",
      "metadata": {
        "id": "1e377af3"
      },
      "source": [
        "<H1> EDA on full_text feature"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "becd717b",
      "metadata": {
        "id": "becd717b"
      },
      "source": [
        "<h3> Text Analysis"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 13,
      "id": "f0333b03",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "id": "f0333b03",
        "outputId": "2d38d4b2-3d61-4b7a-fef5-cf478f769422"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "df['text_length'] = df['full_text'].apply(len)\n",
        "plt.hist(df['text_length'], bins=10)\n",
        "plt.xlabel('Text Length')\n",
        "plt.ylabel('Frequency')\n",
        "plt.title('Distribution of Text Length')\n",
        "plt.show()\n",
        "\n",
        "#Checking the distribution of text length"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 14,
      "id": "09adb117",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 562
        },
        "id": "09adb117",
        "outputId": "1bd21e78-ae9c-48a6-a573-4700ed566c2e"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "[nltk_data] Downloading package stopwords to /root/nltk_data...\n",
            "[nltk_data]   Package stopwords is already up-to-date!\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: title={'center': 'Top 20 Words (excluding stopwords)'}, xlabel='Samples', ylabel='Counts'>"
            ]
          },
          "metadata": {},
          "execution_count": 14
        }
      ],
      "source": [
        "import nltk\n",
        "nltk.download('stopwords')  # Download stopwords dataset\n",
        "from nltk.corpus import stopwords\n",
        "###Checking the top 20 words across all documents not considering stop words\n",
        "stop_words = set(stopwords.words('english'))\n",
        "all_words = [word for tokens in df['tokens'] for word in tokens if word.lower() not in stop_words]\n",
        "word_freq = nltk.FreqDist(all_words)\n",
        "word_freq.plot(20, title=\"Top 20 Words (excluding stopwords)\")"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "9d3c9f74",
      "metadata": {
        "id": "9d3c9f74"
      },
      "source": [
        "<h3> Tokens"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 15,
      "id": "9bdf2beb",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "id": "9bdf2beb",
        "outputId": "b45cb210-46d4-40b1-ecb4-dacb0bbc3161"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "\n",
        "df['token_count'] = df['tokens'].apply(len)\n",
        "plt.hist(df['token_count'], bins=10)\n",
        "plt.xlabel('Token Count')\n",
        "plt.ylabel('Frequency')\n",
        "plt.title('Distribution of Token Count')\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 16,
      "id": "1eb9ed30",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1eb9ed30",
        "outputId": "833e37e7-212b-4bcb-dc66-dced17de5d22"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Number of unique tokens: 53642\n"
          ]
        }
      ],
      "source": [
        "unique_tokens = set(all_words)\n",
        "print(f\"Number of unique tokens: {len(unique_tokens)}\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 17,
      "id": "de63bf3a",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "de63bf3a",
        "outputId": "f079eddf-309d-4bf7-8a75-4c3d0291ed6c"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Token: design, Variations: {'Design', 'DESIGN', 'design'}\n",
            "Token: thinking, Variations: {'THINKING', 'Thinking', 'thinking'}\n",
            "Token: for, Variations: {'For', 'for', 'FOR'}\n",
            "Token: innovation, Variations: {'innovation', 'Innovation', 'INNOVATION'}\n",
            "Token: reflexion, Variations: {'reflexion', 'Reflexion'}\n",
            "Token: challenge, Variations: {'Challenge', 'challenge', 'CHALLENGE'}\n",
            "Token: selection, Variations: {'selection', 'SELECTION', 'Selection'}\n",
            "Token: the, Variations: {'THE', 'The', 'the'}\n",
            "Token: tool, Variations: {'tool', 'TOOL', 'TooL', 'Tool'}\n",
            "Token: i, Variations: {'I', 'i'}\n",
            "Token: use, Variations: {'USE', 'use', 'Use'}\n",
            "Token: to, Variations: {'To', 'to', 'TO'}\n",
            "Token: help, Variations: {'help', 'Help', 'HELP'}\n",
            "Token: all, Variations: {'ALL', 'all', 'All'}\n",
            "Token: stakeholders, Variations: {'STAKEHOLDERS', 'stakeholders', 'Stakeholders'}\n",
            "Token: finding, Variations: {'finding', 'Finding'}\n",
            "Token: their, Variations: {'THEIR', 'their', 'Their'}\n",
            "Token: way, Variations: {'way', 'Way', 'WAY'}\n",
            "Token: through, Variations: {'through', 'Through', 'THROUGH'}\n",
            "Token: complexity, Variations: {'complexity', 'Complexity'}\n",
            "Token: of, Variations: {'oF', 'Of', 'of', 'OF'}\n",
            "Token: a, Variations: {'A', 'a'}\n",
            "Token: project, Variations: {'Project', 'PROJECT', 'project'}\n",
            "Token: is, Variations: {'is', 'IS', 'Is'}\n",
            "Token: mind, Variations: {'MIND', 'mind', 'Mind', 'mInd'}\n",
            "Token: map, Variations: {'Map', 'MAP', 'map'}\n",
            "Token: what, Variations: {'What', 'WHAT', 'what'}\n",
            "Token: exactly, Variations: {'Exactly', 'exactly'}\n",
            "Token: according, Variations: {'According', 'according'}\n",
            "Token: definition, Variations: {'DEFINITION', 'Definition', 'definition'}\n",
            "Token: buzan, Variations: {'buzan', 'Buzan'}\n",
            "Token: and, Variations: {'AND', 'And', 'and'}\n",
            "Token: b., Variations: {'b.', 'B.'}\n"
          ]
        }
      ],
      "source": [
        "### Identifying if tokens are already standardized\n",
        "\n",
        "from collections import defaultdict\n",
        "\n",
        "\n",
        "all_tokens = [token for sublist in df['tokens'] for token in sublist]\n",
        "\n",
        "# Creating a dictionary to hold each unique token and its variations\n",
        "token_variations = defaultdict(set)\n",
        "\n",
        "# Populating the dictionary\n",
        "for token in all_tokens:\n",
        "    # Using a standardized form for matching\n",
        "    standardized_token = token.lower()\n",
        "    token_variations[standardized_token].add(token)\n",
        "\n",
        "# Identifying tokens with variations\n",
        "count=0\n",
        "for standard_token, variations in token_variations.items():\n",
        "    count+=1\n",
        "    if len(variations) > 1 and count<50:\n",
        "        print(f\"Token: {standard_token}, Variations: {variations}\")\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "####### The tokens are not completely inconsistency free\n",
        "\n",
        "## We will check further to see if we have punctuational token variations"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 18,
      "id": "5618acb5",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5618acb5",
        "outputId": "72703b03-cacb-4469-9d1f-7c7b35157198"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Base Token: Design, With Punctuation: {'Design--'}, Without Punctuation: {'Design'}\n",
            "Base Token: Thinking, With Punctuation: {'Thinking-'}, Without Punctuation: {'Thinking'}\n",
            "Base Token: for, With Punctuation: {'for/', '-for', '.for'}, Without Punctuation: {'for'}\n",
            "Base Token: innovation, With Punctuation: {'-innovation', 'innovation-'}, Without Punctuation: {'innovation'}\n",
            "Base Token: Challenge, With Punctuation: {'Challenge:-', 'Challenge/', 'Challenge-', '-Challenge-'}, Without Punctuation: {'Challenge'}\n",
            "Base Token: selection, With Punctuation: {'selection-'}, Without Punctuation: {'selection'}\n",
            "Base Token: The, With Punctuation: {'-The', 'The-', '.The'}, Without Punctuation: {'The'}\n",
            "Base Token: tool, With Punctuation: {'-tool', 'tool-'}, Without Punctuation: {'tool'}\n",
            "Base Token: I, With Punctuation: {'-I', 'I.', '.I'}, Without Punctuation: {'I'}\n",
            "Base Token: use, With Punctuation: {'use/', 'use-'}, Without Punctuation: {'use'}\n"
          ]
        }
      ],
      "source": [
        "import string\n",
        "from collections import defaultdict\n",
        "\n",
        "\n",
        "all_tokens = [token for sublist in df['tokens'] for token in sublist]\n",
        "\n",
        "# Function to remove punctuation from a token\n",
        "def remove_punctuation(text):\n",
        "    return text.translate(str.maketrans('', '', string.punctuation))\n",
        "\n",
        "# Dictionary to keep track of tokens with and without punctuation\n",
        "tokens_with_without_punct = defaultdict(lambda: {'with': set(), 'without': set()})\n",
        "\n",
        "for token in all_tokens:\n",
        "    stripped_token = remove_punctuation(token)\n",
        "    if stripped_token != token:\n",
        "        # The token had punctuation and was modified\n",
        "        tokens_with_without_punct[stripped_token]['with'].add(token)\n",
        "    else:\n",
        "        # The token had no punctuation to remove\n",
        "        tokens_with_without_punct[stripped_token]['without'].add(token)\n",
        "\n",
        "# Now, we'll find tokens that exist both with and without punctuation\n",
        "tokens_with_both_forms = {token: forms for token, forms in tokens_with_without_punct.items() if forms['with'] and forms['without']}\n",
        "\n",
        "# Display results\n",
        "\n",
        "\n",
        "count=0\n",
        "\n",
        "for token, forms in tokens_with_both_forms.items():\n",
        "    print(f\"Base Token: {token}, With Punctuation: {forms['with']}, Without Punctuation: {forms['without']}\")\n",
        "    count+=1\n",
        "    if count==10:\n",
        "        break\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "5e0253d1",
      "metadata": {
        "id": "5e0253d1"
      },
      "source": [
        "### Based on the cell results above it seems like there exists token with punctuation versions\n",
        "\n",
        "- Considering standardizing the tokens after a more basic EDA of the rest of the features"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "d0499182",
      "metadata": {
        "id": "d0499182"
      },
      "source": [
        "<h3> Label Distribution"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 19,
      "id": "7fb7c479",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 599
        },
        "id": "7fb7c479",
        "outputId": "75bbfcf2-316f-4000-9e0a-edc2acb80123"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "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qBAREZFisVAhIiIixWKhQkRERIrFQoWIiIgUi4UKERERKRYLFSIiIlIsFipERESkWCxUiIiISLFYqBAREZFisVAhIiIixWKhQkRERIrFQoWIiIgUi4UKERERKRYLFSIiIlIsFipERESkWCxUiIiISLFYqBAREZFisVAhIiIixWKhQkRERIrFQoWIiIgUi4UKERERKRYLFSIiIlIsFipERESkWCxUiIiISLFYqBAREZFisVAhIiIixWKhQkRERIrFQoWIiIgUi4UKERERKRYLFSIiIlIsFipERESkWCxUiIiISLFYqBAREZFisVAhIiIixWKhQkRERIrFQoWIiIgUi4UKERERKRYLFSIiIlIsFipERESkWCxUiIiISLFYqBAREZFisVAhIiIixWKhQkRERIrFQoWIiIgUi4UKERERKRYLFSIiIlIsFipERESkWCxUiIiISLFYqBAREZFisVAhIiIixWKhQkRERIrFQoWIiIgUi4UKERERKRYLFSIiIlIsFipERESkWCxUiIiISLFYqBAREZFisVAhIiIixVJMoTJ79myoVCoMHz5c7ihERESkEIooVC5duoSVK1fCxcVF7ihERESkILIXKlFRUejVqxdWrVoFW1tbueMQERGRgsheqAwePBht2rRBs2bNPnluXFwcIiIitL6IiIhIfxnKefFNmzbh6tWruHTpUpbOnzVrFqZMmaLjVERERKQUsrWoPHv2DMOGDcOGDRtgYmKSpf9m/PjxCA8P13w9e/ZMxymJiIhITrK1qFy5cgWhoaH46quvNPuSkpJw+vRpLFu2DHFxcTAwMND6b4yNjWFsbCx1VCIiIpKJbIVK06ZNcePGDa19/fr1Q/ny5eHl5ZWmSCEiIqK8R7ZCxdLSEpUrV9baZ25ujgIFCqTZT0RERHmT7KN+iIiIiDIi66if1E6ePCl3BCIiIlIQtqgQERGRYrFQISIiIsVioUJERESKxUKFiIiIFIuFChERESkWCxUiIiJSLBYqREREpFgsVIiIiEixWKgQERGRYrFQISIiIsVioUJERESKxUKFiIiIFIuFChERESkWCxUiIiJSLBYqREREpFgsVIiIiEixWKgQERGRYrFQISIiIsVioUJERESKxUKFiIiIFIuFChERESkWCxUiIiJSLBYqREREpFgsVIiIiEixWKgQERGRYrFQISIiIsVioUJERESKxUKFiIiIFIuFChERESkWCxUiIiJSLBYqREREpFgsVIiIiEixWKgQERGRYrFQISIiIsVioUJERESKxUKFiIiIFIuFChERESkWCxUiIiJSLBYqREREpFgsVIiIiEixWKgQERGRYrFQISIiIsVioUJERESKxUKFiIiIFIuFChERESkWCxUiIiJSLBYqREREpFgsVIiIiEixWKgQERGRYrFQISIiIsVioUJERESKxUKFiIiIFIuFChERESkWCxUiIiJSLBYqREREpFgsVIiIiEixWKgQERGRYrFQISIiIsXKVqHy8OHDnM5BRERElEa2CpUyZcqgcePGWL9+PWJjY3M6ExERERGAbBYqV69ehYuLC0aOHAk7OzsMGDAAFy9e/OzX+eOPP+Di4gIrKytYWVmhTp06OHDgQHYiERERkR7KVqFSrVo1LF68GC9fvoSPjw+Cg4NRv359VK5cGQsWLMB///2XpdcpXrw4Zs+ejStXruDy5cto0qQJOnTogKCgoOzEIiIiIj2jEkKIL32RuLg4LF++HOPHj0d8fDyMjIzw/fff47fffkPRokU/67Xy58+PuXPnon///p88NyIiAtbW1ggPD4eVlVV242fIady+HH/NzDye3UbS6xEREcnhc/5+f9Gon8uXL2PQoEEoWrQoFixYgNGjR+PBgwc4cuQIXr58iQ4dOmT5tZKSkrBp0yZER0ejTp066Z4TFxeHiIgIrS8iIiLSX4bZ+Y8WLFgAX19f3LlzB61bt8batWvRunVrqNUf6p6SJUvCz88PTk5On3ytGzduoE6dOoiNjYWFhQV27NiBihUrpnvurFmzMGXKlOxEJiIiolwoW49+nJ2d4eHhAXd39wwf7cTHx2Pjxo3o27dvpq8VHx+Pp0+fIjw8HFu3bsXq1atx6tSpdIuVuLg4xMXFabYjIiJQokQJPvohIiLKRT7n0U+O9FHJSc2aNUPp0qWxcuXKT57LPipERES5j877qPj6+sLf3z/Nfn9/f6xZsyY7L6mRnJys1WpCREREeVe2CpVZs2ahYMGCafYXLlwYM2fOzPLrjB8/HqdPn8bjx49x48YNjB8/HidPnkSvXr2yE4uIiIj0TLY60z59+hQlS5ZMs9/R0RFPnz7N8uuEhoaiT58+CA4OhrW1NVxcXHDo0CE0b948O7GIiIhIz2SrUClcuDCuX7+eZlRP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dM+ZNWsWrK2tNV8lSpSQOCURERFJSTGFyuDBg/Hvv/9i06ZNGZ4zfvx4hIeHa76ePXsmYUIiIiKSmiIe/Xh6emLv3r04ffo0ihcvnuF5xsbGmllxiYiISP/JWqgIITBkyBDs2LEDJ0+eRMmSJeWMQ0RERAoja6EyePBg/PXXX9i1axcsLS0REhICALC2toapqamc0YiIiEgBZO2j8scffyA8PByNGjVC0aJFNV+bN2+WMxYREREphOyPfoiIiIgyophRP0RERESpsVAhIiIixWKhQkRERIrFQoWIiIgUi4UKERERKRYLFSIiIlIsFipERESkWCxUiIiISLFYqBAREZFisVAhIiIixWKhQkRERIrFQoWIiIgUi4UKERERKRYLFSIiIlIsFipERESkWCxUiIiISLFYqBAREZFisVAhIiIixWKhQkRERIrFQoWIiIgUi4UKERERKRYLFSIiIlIsFipERESkWCxUiIiISLFYqBAREZFisVAhIiIixWKhQkRERIrFQoWIiIgUi4UKERERKRYLFSIiIlIsFipERESkWCxUiIiISLFYqBAREZFisVAhIiIixWKhQkRERIrFQoWIiIgUi4UKERERKRYLFSIiIlIsFipERESkWCxUiIiISLFYqBAREZFisVAhIiIixWKhQkRERIrFQoWIiIgUi4UKERERKRYLFSIiIlIsFipERESkWCxUiIiISLFYqBAREZFisVAhIiIixWKhQkRERIrFQoWIiIgUi4UKERERKRYLFSIiIlIsFipERESkWCxUiIiISLFYqBAREZFisVAhIiIixWKhQkRERIrFQoWIiIgUS9ZC5fTp02jXrh3s7e2hUqmwc+dOOeMQERGRwshaqERHR6Nq1ar4/fff5YxBRERECmUo58VdXV3h6uoqZwQiIiJSMFkLlc8VFxeHuLg4zXZERISMaYiIiEjXclVn2lmzZsHa2lrzVaJECbkjERERkQ7lqkJl/PjxCA8P13w9e/ZM7khERESkQ7nq0Y+xsTGMjY3ljkFEREQSyVUtKkRERJS3yNqiEhUVhfv372u2Hz16hICAAOTPnx8ODg4yJiMiIiIlkLVQuXz5Mho3bqzZHjlyJACgb9++8PPzkykVERERKYWshUqjRo0ghJAzAhERESkY+6gQERGRYrFQISIiIsVioUJERESKxUKFiIiIFIuFChERESkWCxUiIiJSLBYqREREpFgsVIiIiEixWKgQERGRYrFQISIiIsVioUJERESKxUKFiIiIFIuFChERESkWCxUiIiJSLBYqREREpFgsVIiIiEixWKgQERGRYrFQISIiIsVioUJERESKxUKFiIiIFIuFChERESkWCxUiIiJSLBYqREREpFgsVIiIiEixWKgQERGRYrFQISIiIsVioUJERESKxUKFiIiIFIuFChERESkWCxUiIiJSLBYqREREpFgsVIiIiEixWKgQERGRYrFQISIiIsVioUJERESKxUKFiIiIFIuFChERESkWCxUiIiJSLBYqREREpFgsVIiIiEixWKgQERGRYrFQISIiIsVioUJERESKxUKFiIiIFIuFChERESkWCxUiIiJSLBYqREREpFgsVIiIiEixWKgQERGRYrFQISIiIsVioUJERESKxUKFiIiIFIuFChERESkWCxUiIiJSLBYqREREpFgsVIiIiEixWKgQERGRYrFQISIiIsVioUJERESKpYhC5ffff4eTkxNMTExQq1YtXLx4Ue5IREREpACyFyqbN2/GyJEjMXnyZFy9ehVVq1ZFy5YtERoaKnc0IiIikpnshcqCBQvw448/ol+/fqhYsSJWrFgBMzMz+Pj4yB2NiIiIZGYo58Xj4+Nx5coVjB8/XrNPrVajWbNm+Oeff9KcHxcXh7i4OM12eHg4ACAiIkIn+ZLj3uvkdTOiq++DiIhISVL+3gkhPnmurIXK69evkZSUhCJFimjtL1KkCG7fvp3m/FmzZmHKlClp9pcoUUJnGaVkvUjuBERERNKJjIyEtbV1pufIWqh8rvHjx2PkyJGa7eTkZLx9+xYFChSASqWSMdn/iYiIQIkSJfDs2TNYWVkxC7PkqjzMovwsSsvDLMrPosQ8QghERkbC3t7+k+fKWqgULFgQBgYGePXqldb+V69ewc7OLs35xsbGMDY21tpnY2Ojy4jZZmVlpYh/DACzZERJWQBl5WGW9CkpC6CsPMySPiVlAZSV51MtKSlk7UxrZGSEr7/+GseOHdPsS05OxrFjx1CnTh0ZkxEREZESyP7oZ+TIkejbty9q1KiBb775BosWLUJ0dDT69esndzQiIiKSmeyFSrdu3fDff/9h0qRJCAkJQbVq1XDw4ME0HWxzC2NjY0yePDnNIypmYZaMKCkPsyg/C6CsPMyi/CyA8vJ8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\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "all_labels = [label for sublist in df['labels'] for label in sublist]\n",
        "label_freq = nltk.FreqDist(all_labels)\n",
        "plt.xticks(rotation=90)\n",
        "plt.bar(label_freq.keys(), label_freq.values())\n",
        "plt.xlabel('Labels')\n",
        "plt.ylabel('Frequency')\n",
        "plt.title('Distribution of Labels')\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 20,
      "id": "6b3d6934",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6b3d6934",
        "outputId": "957a4358-fa22-455f-8fa6-383e3ea8f2ab"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting Counter\n",
            "  File was already downloaded /content/Counter-1.0.0.tar.gz\n",
            "  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "Successfully downloaded Counter\n",
            "B-NAME_STUDENT: 1365\n",
            "I-NAME_STUDENT: 1096\n",
            "B-URL_PERSONAL: 110\n",
            "B-EMAIL: 39\n",
            "B-ID_NUM: 78\n",
            "I-URL_PERSONAL: 1\n",
            "B-USERNAME: 6\n",
            "B-PHONE_NUM: 6\n",
            "I-PHONE_NUM: 15\n",
            "B-STREET_ADDRESS: 2\n",
            "I-STREET_ADDRESS: 20\n",
            "I-ID_NUM: 1\n"
          ]
        }
      ],
      "source": [
        "!pip download Counter\n",
        "from collections import  Counter\n",
        "all_labels = [label for sublist in df['labels'] for label in sublist if label != \"O\"]\n",
        "\n",
        "#  Count the frequencies of the worded labels\n",
        "label_frequencies = Counter(all_labels)\n",
        "\n",
        "#  Print the frequency of each label\n",
        "for label, count in label_frequencies.items():\n",
        "    print(f\"{label}: {count}\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 21,
      "id": "bec32517",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 561
        },
        "id": "bec32517",
        "outputId": "dfff58ad-9469-4430-96ad-13d70de6e282"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "     document                                          full_text  \\\n",
              "24        379  COURSERA – University of Virginia, Darden Scho...   \n",
              "86       2769  Design Thinking for Innovation\\n\\nby Universit...   \n",
              "134      3709  , Vol.7, No.5, May 2009\\n\\nE-ISSN: 2321-9637\\n...   \n",
              "171      4227  Mohamed Smith (agood@gmail.com)\\n\\nVisualizati...   \n",
              "185      4381  WRITING CENTRE  Level 3 East, Hub Central  Nor...   \n",
              "\n",
              "                                                tokens  \\\n",
              "24   [COURSERA, –, University, of, Virginia, ,, Dar...   \n",
              "86   [Design, Thinking, for, Innovation, \\n\\n, by, ...   \n",
              "134  [,, Vol.7, ,, No.5, ,, May, 2009, \\n\\n, E, -, ...   \n",
              "171  [Mohamed, Smith, (, agood@gmail.com, ), \\n\\n, ...   \n",
              "185  [WRITING, CENTRE,  , Level, 3, East, ,, Hub, C...   \n",
              "\n",
              "                                   trailing_whitespace  \\\n",
              "24   [True, True, True, True, False, True, True, Tr...   \n",
              "86   [True, True, True, False, False, True, True, T...   \n",
              "134  [True, False, True, False, True, True, False, ...   \n",
              "171  [True, True, False, False, False, False, False...   \n",
              "185  [True, True, False, True, True, False, True, T...   \n",
              "\n",
              "                                                labels  text_length  \\\n",
              "24   [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, ...         4244   \n",
              "86   [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, ...         3084   \n",
              "134  [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, ...        12098   \n",
              "171  [B-NAME_STUDENT, I-NAME_STUDENT, O, B-EMAIL, O...         4118   \n",
              "185  [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, ...         6147   \n",
              "\n",
              "     token_count  \n",
              "24           766  \n",
              "86           623  \n",
              "134         2456  \n",
              "171          803  \n",
              "185         1222  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-c4f1a47b-0d65-4270-b4d2-f28cf21c19d0\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>document</th>\n",
              "      <th>full_text</th>\n",
              "      <th>tokens</th>\n",
              "      <th>trailing_whitespace</th>\n",
              "      <th>labels</th>\n",
              "      <th>text_length</th>\n",
              "      <th>token_count</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>24</th>\n",
              "      <td>379</td>\n",
              "      <td>COURSERA – University of Virginia, Darden Scho...</td>\n",
              "      <td>[COURSERA, –, University, of, Virginia, ,, Dar...</td>\n",
              "      <td>[True, True, True, True, False, True, True, Tr...</td>\n",
              "      <td>[O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, ...</td>\n",
              "      <td>4244</td>\n",
              "      <td>766</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>86</th>\n",
              "      <td>2769</td>\n",
              "      <td>Design Thinking for Innovation\\n\\nby Universit...</td>\n",
              "      <td>[Design, Thinking, for, Innovation, \\n\\n, by, ...</td>\n",
              "      <td>[True, True, True, False, False, True, True, T...</td>\n",
              "      <td>[O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, ...</td>\n",
              "      <td>3084</td>\n",
              "      <td>623</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>134</th>\n",
              "      <td>3709</td>\n",
              "      <td>, Vol.7, No.5, May 2009\\n\\nE-ISSN: 2321-9637\\n...</td>\n",
              "      <td>[,, Vol.7, ,, No.5, ,, May, 2009, \\n\\n, E, -, ...</td>\n",
              "      <td>[True, False, True, False, True, True, False, ...</td>\n",
              "      <td>[O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, ...</td>\n",
              "      <td>12098</td>\n",
              "      <td>2456</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>171</th>\n",
              "      <td>4227</td>\n",
              "      <td>Mohamed Smith (agood@gmail.com)\\n\\nVisualizati...</td>\n",
              "      <td>[Mohamed, Smith, (, agood@gmail.com, ), \\n\\n, ...</td>\n",
              "      <td>[True, True, False, False, False, False, False...</td>\n",
              "      <td>[B-NAME_STUDENT, I-NAME_STUDENT, O, B-EMAIL, O...</td>\n",
              "      <td>4118</td>\n",
              "      <td>803</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>185</th>\n",
              "      <td>4381</td>\n",
              "      <td>WRITING CENTRE  Level 3 East, Hub Central  Nor...</td>\n",
              "      <td>[WRITING, CENTRE,  , Level, 3, East, ,, Hub, C...</td>\n",
              "      <td>[True, True, False, True, True, False, True, T...</td>\n",
              "      <td>[O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, ...</td>\n",
              "      <td>6147</td>\n",
              "      <td>1222</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c4f1a47b-0d65-4270-b4d2-f28cf21c19d0')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-c4f1a47b-0d65-4270-b4d2-f28cf21c19d0 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-c4f1a47b-0d65-4270-b4d2-f28cf21c19d0');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-7e950b45-dc44-4dde-b5e5-077f2bac9f1b\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-7e950b45-dc44-4dde-b5e5-077f2bac9f1b')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-7e950b45-dc44-4dde-b5e5-077f2bac9f1b button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "     document                                          full_text  \\\n",
              "29        609  Date:14-09-2021\\n\\nNEWS PAPER\\n\\nProject: News...   \n",
              "99       2926  NAME: Ignacia Hernandez   Roll No. : 932353568...   \n",
              "124      3565  Project:  Experiment sheet (5W+H)\\n\\nInterview...   \n",
              "213      4717  STORY TELLING\\n\\nPIN NO. :163133980712   NAME ...   \n",
              "231      4913  DESIGN THINKING\\n\\nEXPERIMENT – 2\\n\\nName: Niz...   \n",
              "\n",
              "                                                tokens  \\\n",
              "29   [Date:14, -, 09, -, 2021, \\n\\n, NEWS, PAPER, \\...   \n",
              "99   [NAME, :, Ignacia, Hernandez,   , Roll, No, .,...   \n",
              "124  [Project, :,  , Experiment, sheet, (, 5W+H, ),...   \n",
              "213  [STORY, TELLING, \\n\\n, PIN, NO, ., :, 16313398...   \n",
              "231  [DESIGN, THINKING, \\n\\n, EXPERIMENT, –, 2, \\n\\...   \n",
              "\n",
              "                                   trailing_whitespace  \\\n",
              "29   [False, False, False, False, False, False, Tru...   \n",
              "99   [False, True, True, True, False, True, False, ...   \n",
              "124  [False, True, False, True, True, False, False,...   \n",
              "213  [True, False, False, True, False, True, False,...   \n",
              "231  [True, False, False, True, True, False, False,...   \n",
              "\n",
              "                                                labels  text_length  \\\n",
              "29   [O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, ...         4195   \n",
              "99   [O, O, B-NAME_STUDENT, I-NAME_STUDENT, O, O, O...         1774   \n",
              "124  [O, O, O, O, O, O, O, O, O, O, O, O, B-NAME_ST...         1756   \n",
              "213  [O, O, O, O, O, O, O, B-ID_NUM, O, O, O, B-NAM...         1946   \n",
              "231  [O, O, O, O, O, O, O, O, O, B-NAME_STUDENT, I-...         2471   \n",
              "\n",
              "     token_count  \n",
              "29           915  \n",
              "99           429  \n",
              "124          428  \n",
              "213          443  \n",
              "231          605  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-0370fecd-0466-40ec-8bdd-e153094e558d\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>document</th>\n",
              "      <th>full_text</th>\n",
              "      <th>tokens</th>\n",
              "      <th>trailing_whitespace</th>\n",
              "      <th>labels</th>\n",
              "      <th>text_length</th>\n",
              "      <th>token_count</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>29</th>\n",
              "      <td>609</td>\n",
              "      <td>Date:14-09-2021\\n\\nNEWS PAPER\\n\\nProject: News...</td>\n",
              "      <td>[Date:14, -, 09, -, 2021, \\n\\n, NEWS, PAPER, \\...</td>\n",
              "      <td>[False, False, False, False, False, False, Tru...</td>\n",
              "      <td>[O, O, O, O, O, O, O, O, O, O, O, O, O, O, O, ...</td>\n",
              "      <td>4195</td>\n",
              "      <td>915</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>99</th>\n",
              "      <td>2926</td>\n",
              "      <td>NAME: Ignacia Hernandez   Roll No. : 932353568...</td>\n",
              "      <td>[NAME, :, Ignacia, Hernandez,   , Roll, No, .,...</td>\n",
              "      <td>[False, True, True, True, False, True, False, ...</td>\n",
              "      <td>[O, O, B-NAME_STUDENT, I-NAME_STUDENT, O, O, O...</td>\n",
              "      <td>1774</td>\n",
              "      <td>429</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>124</th>\n",
              "      <td>3565</td>\n",
              "      <td>Project:  Experiment sheet (5W+H)\\n\\nInterview...</td>\n",
              "      <td>[Project, :,  , Experiment, sheet, (, 5W+H, ),...</td>\n",
              "      <td>[False, True, False, True, True, False, False,...</td>\n",
              "      <td>[O, O, O, O, O, O, O, O, O, O, O, O, B-NAME_ST...</td>\n",
              "      <td>1756</td>\n",
              "      <td>428</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>213</th>\n",
              "      <td>4717</td>\n",
              "      <td>STORY TELLING\\n\\nPIN NO. :163133980712   NAME ...</td>\n",
              "      <td>[STORY, TELLING, \\n\\n, PIN, NO, ., :, 16313398...</td>\n",
              "      <td>[True, False, False, True, False, True, False,...</td>\n",
              "      <td>[O, O, O, O, O, O, O, B-ID_NUM, O, O, O, B-NAM...</td>\n",
              "      <td>1946</td>\n",
              "      <td>443</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>231</th>\n",
              "      <td>4913</td>\n",
              "      <td>DESIGN THINKING\\n\\nEXPERIMENT – 2\\n\\nName: Niz...</td>\n",
              "      <td>[DESIGN, THINKING, \\n\\n, EXPERIMENT, –, 2, \\n\\...</td>\n",
              "      <td>[True, False, False, True, True, False, False,...</td>\n",
              "      <td>[O, O, O, O, O, O, O, O, O, B-NAME_STUDENT, I-...</td>\n",
              "      <td>2471</td>\n",
              "      <td>605</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-0370fecd-0466-40ec-8bdd-e153094e558d')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-0370fecd-0466-40ec-8bdd-e153094e558d button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-0370fecd-0466-40ec-8bdd-e153094e558d');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-d995d629-94c6-4f9c-970c-de80f4932fa3\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-d995d629-94c6-4f9c-970c-de80f4932fa3')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-d995d629-94c6-4f9c-970c-de80f4932fa3 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {}
        }
      ],
      "source": [
        "### Checking out some rows with these labels present\n",
        "labels_of_interest = [\"B-EMAIL\", \"B-ID_NUM\"]\n",
        "\n",
        "for label in labels_of_interest:\n",
        "    # Use a boolean mask to filter rows where our label of interest is found\n",
        "    mask = df['labels'].apply(lambda x: label in x)\n",
        "\n",
        "    # Display the filtered rows for this label\n",
        "    display(df[mask].head())  # Using .head() to display a few rows, adjust as needed\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "8b8995b9",
      "metadata": {
        "id": "8b8995b9"
      },
      "source": [
        "<h4> Wordcloud for Text"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 22,
      "id": "70903ba4",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 436
        },
        "id": "70903ba4",
        "outputId": "6f544a85-7527-4c33-97b3-d27454bc2bcd"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x800 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "wordcloud = WordCloud(width=800, height=400, background_color ='white').generate(' '.join(all_words))\n",
        "plt.figure(figsize = (8, 8), facecolor = None)\n",
        "plt.imshow(wordcloud)\n",
        "plt.axis(\"off\")\n",
        "plt.tight_layout(pad = 0)\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "12df6bfe",
      "metadata": {
        "id": "12df6bfe"
      },
      "source": [
        "### First Attempt : For the first attempt, we will not be adding addtional datasets. We'll try and optimize the exisiting features through EDA and applicable transformations before deciding on the model"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "84d72504",
      "metadata": {
        "id": "84d72504"
      },
      "source": [
        "### This alligns with a Named Entity Recognition (NER) task"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "79b2d4b6",
      "metadata": {
        "id": "79b2d4b6"
      },
      "source": [
        "#### For label observations we know that the ratio of '0' in the label lists are way higher than the worded labels. We'll print out some of the document rows with the worded labels, which will help get an overview of what PII exists in the text of a document row"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 23,
      "id": "94a901ea",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "94a901ea",
        "outputId": "fdd3540e-135d-4fee-91b5-0d083a8ba94c"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Document number 5716:\n",
            "\tToken: meyermichelle, Label: B-USERNAME\n",
            "--------------------------------------------------\n",
            "Document number 5717:\n",
            "\tToken: Natalya, Label: B-NAME_STUDENT\n",
            "\tToken: Kotov, Label: I-NAME_STUDENT\n",
            "--------------------------------------------------\n",
            "Document number 5731:\n",
            "\tToken: Abdul, Label: B-NAME_STUDENT\n",
            "\tToken: Rohim, Label: I-NAME_STUDENT\n",
            "\tToken: Abdul, Label: B-NAME_STUDENT\n",
            "\tToken: Rohim, Label: I-NAME_STUDENT\n",
            "--------------------------------------------------\n",
            "Document number 5736:\n",
            "\tToken: Pietro, Label: B-NAME_STUDENT\n",
            "\tToken: Gabrielli, Label: I-NAME_STUDENT\n",
            "--------------------------------------------------\n",
            "Document number 5738:\n",
            "\tToken: Kara, Label: B-NAME_STUDENT\n",
            "\tToken: Deniz, Label: I-NAME_STUDENT\n",
            "--------------------------------------------------\n",
            "Document number 5748:\n",
            "\tToken: Mohamed, Label: B-NAME_STUDENT\n",
            "\tToken: Kamal, Label: I-NAME_STUDENT\n",
            "\tToken: Mohamed, Label: B-NAME_STUDENT\n",
            "\tToken: Kamal, Label: I-NAME_STUDENT\n",
            "--------------------------------------------------\n",
            "Document number 5775:\n",
            "\tToken: Saadiah, Label: B-NAME_STUDENT\n",
            "\tToken: Jie, Label: I-NAME_STUDENT\n",
            "--------------------------------------------------\n",
            "Document number 5780:\n",
            "\tToken: Giuseppe, Label: B-NAME_STUDENT\n",
            "\tToken: Longo, Label: I-NAME_STUDENT\n",
            "\tToken: Giuseppe, Label: B-NAME_STUDENT\n",
            "\tToken: Longo, Label: I-NAME_STUDENT\n",
            "--------------------------------------------------\n",
            "Document number 5796:\n",
            "\tToken: Dharmendra, Label: B-NAME_STUDENT\n",
            "\tToken: Dharmendra, Label: I-NAME_STUDENT\n",
            "\tToken: Dharmendra, Label: B-NAME_STUDENT\n",
            "\tToken: Dharmendra, Label: I-NAME_STUDENT\n",
            "\tToken: 696135165639, Label: B-ID_NUM\n",
            "\tToken: Vw.:403489591437, Label: B-ID_NUM\n",
            "--------------------------------------------------\n",
            "Document number 5811:\n",
            "\tToken: Federica, Label: B-NAME_STUDENT\n",
            "\tToken: Federica, Label: B-NAME_STUDENT\n",
            "--------------------------------------------------\n",
            "Document number 5816:\n",
            "\tToken: Jo, Label: B-NAME_STUDENT\n",
            "\tToken: Kelly, Label: I-NAME_STUDENT\n",
            "--------------------------------------------------\n",
            "Document number 5830:\n",
            "\tToken: Ivica, Label: B-NAME_STUDENT\n",
            "\tToken: Marija, Label: I-NAME_STUDENT\n",
            "--------------------------------------------------\n",
            "Document number 5840:\n",
            "\tToken: Yaser, Label: B-NAME_STUDENT\n",
            "\tToken: Mostafa, Label: I-NAME_STUDENT\n",
            "--------------------------------------------------\n",
            "Document number 5855:\n",
            "\tToken: May, Label: B-NAME_STUDENT\n",
            "\tToken: Sutton, Label: I-NAME_STUDENT\n",
            "--------------------------------------------------\n",
            "Document number 5874:\n",
            "\tToken: Neia, Label: B-NAME_STUDENT\n",
            "\tToken: Rodrigues, Label: I-NAME_STUDENT\n",
            "--------------------------------------------------\n",
            "Document number 5896:\n",
            "\tToken: Donya, Label: B-NAME_STUDENT\n",
            "\tToken: Donya, Label: I-NAME_STUDENT\n",
            "--------------------------------------------------\n",
            "Document number 5902:\n",
            "\tToken: Sam, Label: B-NAME_STUDENT\n",
            "\tToken: Chan, Label: I-NAME_STUDENT\n",
            "\tToken: Karen, Label: B-NAME_STUDENT\n",
            "--------------------------------------------------\n",
            "Document number 5906:\n",
            "\tToken: Cristina, Label: B-NAME_STUDENT\n",
            "\tToken: Valerio, Label: I-NAME_STUDENT\n",
            "\tToken: Cristina, Label: B-NAME_STUDENT\n",
            "\tToken: Valerio, Label: I-NAME_STUDENT\n",
            "--------------------------------------------------\n",
            "Document number 5910:\n",
            "\tToken: Sara, Label: B-NAME_STUDENT\n",
            "\tToken: Garcia, Label: I-NAME_STUDENT\n",
            "--------------------------------------------------\n",
            "Document number 5922:\n",
            "\tToken: Leonardo, Label: B-NAME_STUDENT\n",
            "\tToken: Giles, Label: I-NAME_STUDENT\n",
            "--------------------------------------------------\n",
            "Document number 5923:\n",
            "\tToken: https://jones-hernandez.com/main/tag/listindex.htm, Label: B-URL_PERSONAL\n",
            "\tToken: https://jones-hernandez.com/main/tag/listindex.htm, Label: B-URL_PERSONAL\n",
            "--------------------------------------------------\n",
            "Document number 5935:\n",
            "\tToken: Mohamad, Label: B-NAME_STUDENT\n",
            "--------------------------------------------------\n",
            "Document number 5944:\n",
            "\tToken: Margarita, Label: B-NAME_STUDENT\n",
            "\tToken: Gould, Label: I-NAME_STUDENT\n",
            "--------------------------------------------------\n",
            "Document number 5952:\n",
            "\tToken: Yareli, Label: B-NAME_STUDENT\n",
            "\tToken: Thomas, Label: I-NAME_STUDENT\n",
            "--------------------------------------------------\n",
            "Document number 5964:\n",
            "\tToken: Karla, Label: B-NAME_STUDENT\n",
            "--------------------------------------------------\n",
            "Document number 6002:\n",
            "\tToken: Uriel, Label: B-NAME_STUDENT\n",
            "\tToken: Romero, Label: I-NAME_STUDENT\n",
            "--------------------------------------------------\n",
            "Document number 6007:\n",
            "\tToken: https://www.youtube.com/watch?v=2sOzgGAeiQV, Label: B-URL_PERSONAL\n",
            "--------------------------------------------------\n",
            "Document number 6023:\n",
            "\tToken: Sarah, Label: B-NAME_STUDENT\n",
            "\tToken: Calixto, Label: I-NAME_STUDENT\n",
            "\tToken: Sarah, Label: B-NAME_STUDENT\n",
            "\tToken: Calixto, Label: I-NAME_STUDENT\n",
            "--------------------------------------------------\n",
            "Document number 6027:\n",
            "\tToken: Enrico, Label: B-NAME_STUDENT\n",
            "\tToken: Laterza, Label: I-NAME_STUDENT\n",
            "--------------------------------------------------\n",
            "Document number 6049:\n",
            "\tToken: Yessica, Label: B-NAME_STUDENT\n",
            "\tToken: Lopes, Label: I-NAME_STUDENT\n",
            "--------------------------------------------------\n",
            "Document number 6057:\n",
            "\tToken: Lerato, Label: B-NAME_STUDENT\n",
            "\tToken: Salem, Label: I-NAME_STUDENT\n",
            "--------------------------------------------------\n",
            "Document number 6064:\n",
            "\tToken: Silvia, Label: B-NAME_STUDENT\n",
            "--------------------------------------------------\n",
            "Document number 6074:\n",
            "\tToken: Abdul, Label: B-NAME_STUDENT\n",
            "\tToken: Nasar, Label: I-NAME_STUDENT\n",
            "--------------------------------------------------\n",
            "Document number 6085:\n",
            "\tToken: Siew, Label: B-NAME_STUDENT\n",
            "\tToken: Santamaria, Label: I-NAME_STUDENT\n",
            "--------------------------------------------------\n",
            "Document number 6088:\n",
            "\tToken: Julia, Label: B-NAME_STUDENT\n",
            "\tToken: Bock, Label: I-NAME_STUDENT\n",
            "--------------------------------------------------\n",
            "Document number 6095:\n",
            "\tToken: Angelo, Label: B-NAME_STUDENT\n",
            "\tToken: Martello, Label: I-NAME_STUDENT\n",
            "--------------------------------------------------\n",
            "Document number 6101:\n",
            "\tToken: Martina, Label: B-NAME_STUDENT\n",
            "\tToken: Chong, Label: I-NAME_STUDENT\n",
            "--------------------------------------------------\n",
            "Document number 6117:\n",
            "\tToken: Hari, Label: B-NAME_STUDENT\n",
            "\tToken: Sharma, Label: I-NAME_STUDENT\n",
            "--------------------------------------------------\n",
            "Document number 6121:\n",
            "\tToken: Thai, Label: B-NAME_STUDENT\n",
            "\tToken: Tamang, Label: I-NAME_STUDENT\n",
            "--------------------------------------------------\n",
            "Document number 6124:\n",
            "\tToken: Victoria, Label: B-NAME_STUDENT\n",
            "\tToken: Horton, Label: I-NAME_STUDENT\n",
            "--------------------------------------------------\n",
            "Document number 6133:\n",
            "\tToken: Mahammad, Label: B-NAME_STUDENT\n",
            "\tToken: Khan, Label: I-NAME_STUDENT\n",
            "--------------------------------------------------\n",
            "Document number 6139:\n",
            "\tToken: Stephanie, Label: B-NAME_STUDENT\n",
            "\tToken: Johnstone, Label: I-NAME_STUDENT\n",
            "--------------------------------------------------\n",
            "Document number 6148:\n",
            "\tToken: Christian, Label: B-NAME_STUDENT\n",
            "--------------------------------------------------\n",
            "Document number 6155:\n",
            "\tToken: Khairul, Label: B-NAME_STUDENT\n",
            "\tToken: Rahman, Label: I-NAME_STUDENT\n",
            "--------------------------------------------------\n",
            "Document number 6169:\n",
            "\tToken: Sagar, Label: B-NAME_STUDENT\n",
            "\tToken: Sanchez, Label: I-NAME_STUDENT\n",
            "--------------------------------------------------\n",
            "Document number 6171:\n",
            "\tToken: Alexandra, Label: B-NAME_STUDENT\n",
            "\tToken: Serafini, Label: I-NAME_STUDENT\n",
            "--------------------------------------------------\n",
            "Document number 6174:\n",
            "\tToken: Phillip, Label: B-NAME_STUDENT\n",
            "\tToken: Santillan, Label: I-NAME_STUDENT\n",
            "--------------------------------------------------\n",
            "Document number 6187:\n",
            "\tToken: Gino, Label: B-NAME_STUDENT\n",
            "\tToken: Schiavo, Label: I-NAME_STUDENT\n",
            "--------------------------------------------------\n",
            "Document number 6194:\n",
            "\tToken: http://www.miller.org/search/tags/tagsearch.php, Label: B-URL_PERSONAL\n",
            "--------------------------------------------------\n",
            "Document number 6220:\n",
            "\tToken: Alison, Label: B-NAME_STUDENT\n",
            "--------------------------------------------------\n"
          ]
        }
      ],
      "source": [
        "def print_labels_with_values(df):\n",
        "    for index, row in df.iterrows():\n",
        "        print(f\"Document number {row['document']}:\")\n",
        "\n",
        "        # Zip together the tokens and labels for parallel iteration\n",
        "        paired = list(zip(row['tokens'], row['labels']))\n",
        "\n",
        "        # Filter out pairs where label is 'O', and print remaining tokens with their labels\n",
        "        for token, label in paired:\n",
        "            if label != 'O':\n",
        "                print(f\"\\tToken: {token}, Label: {label}\")\n",
        "        print(\"-\" * 50)  # Separator for readability\n",
        "\n",
        "print_labels_with_values(df[300:350])"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "9bd529e2",
      "metadata": {
        "id": "9bd529e2"
      },
      "source": [
        "# Modelling on un-formatted Datatset (No featurization) to test out baseline performance"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Checking to see if allignment is needed**"
      ],
      "metadata": {
        "id": "leQh48_0r-mx"
      },
      "id": "leQh48_0r-mx"
    },
    {
      "cell_type": "code",
      "source": [
        "from transformers import AutoTokenizer\n",
        "\n",
        "# Initializing the tokenizer for the model\n",
        "tokenizer = AutoTokenizer.from_pretrained('bert-base-uncased')\n",
        "\n",
        "# Example text and tokens from your dataset\n",
        "original_tokens = df['tokens'][0]\n",
        "original_text = df['full_text'][0]\n",
        "\n",
        "# Tokenize the text\n",
        "tokenized_output = tokenizer(original_text, is_split_into_words=False)\n",
        "\n",
        "# Tokenize using the tokens directly (assuming the dataset tokens are whitespace-separated)\n",
        "tokenized_output_from_tokens = tokenizer(original_tokens, is_split_into_words=True)\n",
        "\n",
        "# Compare\n",
        "print(\"Original Tokens:\", original_tokens)\n",
        "print(\"Tokens from Text:\", tokenizer.convert_ids_to_tokens(tokenized_output['input_ids']))\n",
        "print(\"Tokens from Original Tokens:\", tokenizer.convert_ids_to_tokens(tokenized_output_from_tokens['input_ids']))\n",
        "\n",
        "# Check if alignment is needed\n",
        "if len(original_tokens) != len(tokenized_output_from_tokens['input_ids']) - 2:  # Subtract 2 for special tokens ([CLS], [SEP])\n",
        "    print(\"Alignment is needed.\")\n",
        "else:\n",
        "    print(\"No alignment needed.\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "kHUqSWt_dWxd",
        "outputId": "074321e3-3ff6-48d6-a115-05cd763bd9e1"
      },
      "id": "kHUqSWt_dWxd",
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Token indices sequence length is longer than the specified maximum sequence length for this model (748 > 512). Running this sequence through the model will result in indexing errors\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Original Tokens: ['Design', 'Thinking', 'for', 'innovation', 'reflexion', '-', 'Avril', '2021', '-', 'Nathalie', 'Sylla', '\\n\\n', 'Challenge', '&', 'selection', '\\n\\n', 'The', 'tool', 'I', 'use', 'to', 'help', 'all', 'stakeholders', 'finding', 'their', 'way', 'through', 'the', 'complexity', 'of', 'a', 'project', 'is', 'the', ' ', 'mind', 'map', '.', '\\n\\n', 'What', 'exactly', 'is', 'a', 'mind', 'map', '?', 'According', 'to', 'the', 'definition', 'of', 'Buzan', 'T.', 'and', 'Buzan', 'B.', '(', '1999', ',', 'Dessine', '-', 'moi', ' ', \"l'intelligence\", '.', 'Paris', ':', 'Les', 'Éditions', \"d'Organisation\", '.', ')', ',', 'the', 'mind', 'map', '(', 'or', 'heuristic', 'diagram', ')', 'is', 'a', 'graphic', ' ', 'representation', 'technique', 'that', 'follows', 'the', 'natural', 'functioning', 'of', 'the', 'mind', 'and', 'allows', 'the', 'brain', \"'s\", ' ', 'potential', 'to', 'be', 'released', '.', 'Cf', 'Annex1', '\\n\\n', 'This', 'tool', 'has', 'many', 'advantages', ':', '\\n\\n', '•', ' ', 'It', 'is', 'accessible', 'to', 'all', 'and', 'does', 'not', 'require', 'significant', 'material', 'investment', 'and', 'can', 'be', 'done', ' ', 'quickly', '\\n\\n', '•', ' ', 'It', 'is', 'scalable', '\\n\\n', '•', ' ', 'It', 'allows', 'categorization', 'and', 'linking', 'of', 'information', '\\n\\n', '•', ' ', 'It', 'can', 'be', 'applied', 'to', 'any', 'type', 'of', 'situation', ':', 'notetaking', ',', 'problem', 'solving', ',', 'analysis', ',', 'creation', 'of', ' ', 'new', 'ideas', '\\n\\n', '•', ' ', 'It', 'is', 'suitable', 'for', 'all', 'people', 'and', 'is', 'easy', 'to', 'learn', '\\n\\n', '•', ' ', 'It', 'is', 'fun', 'and', 'encourages', 'exchanges', '\\n\\n', '•', ' ', 'It', 'makes', 'visible', 'the', 'dimension', 'of', 'projects', ',', 'opportunities', ',', 'interconnections', '\\n\\n', '•', ' ', 'It', 'synthesizes', '\\n\\n', '•', ' ', 'It', 'makes', 'the', 'project', 'understandable', '\\n\\n', '•', ' ', 'It', 'allows', 'you', 'to', 'explore', 'ideas', '\\n\\n', 'The', 'creation', 'of', 'a', 'mind', 'map', 'starts', 'with', 'an', 'idea', '/', 'problem', 'located', 'at', 'its', 'center', '.', 'This', 'starting', 'point', ' ', 'generates', 'ideas', '/', 'work', 'areas', ',', 'incremented', 'around', 'this', 'center', 'in', 'a', 'radial', 'structure', ',', 'which', 'in', 'turn', 'is', ' ', 'completed', 'with', 'as', 'many', 'branches', 'as', 'new', 'ideas', '.', '\\n\\n', 'This', 'tool', 'enables', 'creativity', 'and', 'logic', 'to', 'be', 'mobilized', ',', 'it', 'is', 'a', 'map', 'of', 'the', 'thoughts', '.', '\\n\\n', 'Creativity', 'is', 'enhanced', 'because', 'participants', 'feel', 'comfortable', 'with', 'the', 'method', '.', '\\n\\n', 'Application', '&', 'Insight', '\\n\\n', 'I', 'start', 'the', 'process', 'of', 'the', 'mind', 'map', 'creation', 'with', 'the', 'stakeholders', 'standing', 'around', 'a', 'large', 'board', ' ', '(', 'white', 'or', 'paper', 'board', ')', '.', 'In', 'the', 'center', 'of', 'the', 'board', ',', 'I', 'write', 'and', 'highlight', 'the', 'topic', 'to', 'design', '.', '\\n\\n', 'Through', 'a', 'series', 'of', 'questions', ',', 'I', 'guide', 'the', 'stakeholders', 'in', 'modelling', 'the', 'mind', 'map', '.', 'I', 'adapt', 'the', 'series', ' ', 'of', 'questions', 'according', 'to', 'the', 'topic', 'to', 'be', 'addressed', '.', 'In', 'the', 'type', 'of', 'questions', ',', 'we', 'can', 'use', ':', 'who', ',', 'what', ',', ' ', 'when', ',', 'where', ',', 'why', ',', 'how', ',', 'how', 'much', '.', '\\n\\n', 'The', 'use', 'of', 'the', '“', 'why', '”', 'is', 'very', 'interesting', 'to', 'understand', 'the', 'origin', '.', 'By', 'this', 'way', ',', 'the', 'interviewed', 'person', ' ', 'frees', 'itself', 'from', 'paradigms', 'and', 'thus', 'dares', 'to', 'propose', 'new', 'ideas', '/', 'ways', 'of', 'functioning', '.', 'I', 'plan', 'two', ' ', 'hours', 'for', 'a', 'workshop', '.', '\\n\\n', 'Design', 'Thinking', 'for', 'innovation', 'reflexion', '-', 'Avril', '2021', '-', 'Nathalie', 'Sylla', '\\n\\n', 'After', 'modelling', 'the', 'mind', 'map', 'on', 'paper', ',', 'I', 'propose', 'to', 'the', 'participants', 'a', 'digital', 'visualization', 'of', 'their', ' ', 'work', 'with', 'the', 'addition', 'of', 'color', 'codes', ',', 'images', 'and', 'interconnections', '.', 'This', 'second', 'workshop', 'also', 'lasts', ' ', 'two', 'hours', 'and', 'allows', 'the', 'mind', 'map', 'to', 'evolve', '.', 'Once', 'familiarized', 'with', 'it', ',', 'the', 'stakeholders', 'discover', ' ', 'the', 'power', 'of', 'the', 'tool', '.', 'Then', ',', 'the', 'second', 'workshop', 'brings', 'out', 'even', 'more', 'ideas', 'and', 'constructive', ' ', 'exchanges', 'between', 'the', 'stakeholders', '.', 'Around', 'this', 'new', 'mind', 'map', ',', 'they', 'have', 'learned', 'to', 'work', ' ', 'together', 'and', 'want', 'to', 'make', 'visible', 'the', 'untold', 'ideas', '.', '\\n\\n', 'I', 'now', 'present', 'all', 'the', 'projects', 'I', 'manage', 'in', 'this', 'type', 'of', 'format', 'in', 'order', 'to', 'ease', 'rapid', 'understanding', 'for', ' ', 'decision', '-', 'makers', '.', 'These', 'presentations', 'are', 'the', 'core', 'of', 'my', 'business', 'models', '.', 'The', 'decision', '-', 'makers', 'are', ' ', 'thus', 'able', 'to', 'identify', 'the', 'opportunities', 'of', 'the', 'projects', 'and', 'can', 'take', 'quick', 'decisions', 'to', 'validate', 'them', '.', ' ', 'They', 'find', 'answers', 'to', 'their', 'questions', 'thank', 'to', 'a', 'schematic', 'representation', '.', '\\n\\n', 'Approach', '\\n\\n', 'What', 'I', 'find', 'amazing', 'with', 'the', 'facilitation', 'of', 'this', 'type', 'of', 'workshop', 'is', 'the', 'participants', 'commitment', 'for', ' ', 'the', 'project', '.', 'This', 'tool', 'helps', 'to', 'give', 'meaning', '.', 'The', 'participants', 'appropriate', 'the', 'story', 'and', 'want', 'to', 'keep', ' ', 'writing', 'it', '.', 'Then', ',', 'they', 'easily', 'become', 'actors', 'or', 'sponsors', 'of', 'the', 'project', '.', 'A', 'trust', 'relationship', 'is', 'built', ',', ' ', 'thus', 'facilitating', 'the', 'implementation', 'of', 'related', 'actions', '.', '\\n\\n', 'Design', 'Thinking', 'for', 'innovation', 'reflexion', '-', 'Avril', '2021', '-', 'Nathalie', 'Sylla', '\\n\\n', 'Annex', '1', ':', 'Mind', 'Map', 'Shared', 'facilities', 'project', '\\n\\n']\n",
            "Tokens from Text: ['[CLS]', 'design', 'thinking', 'for', 'innovation', 'reflex', '##ion', '-', 'av', '##ril', '2021', '-', 'nat', '##hal', '##ie', 'sy', '##lla', 'challenge', '&', 'selection', 'the', 'tool', 'i', 'use', 'to', 'help', 'all', 'stakeholders', 'finding', 'their', 'way', 'through', 'the', 'complexity', 'of', 'a', 'project', 'is', 'the', 'mind', 'map', '.', 'what', 'exactly', 'is', 'a', 'mind', 'map', '?', 'according', 'to', 'the', 'definition', 'of', 'bu', '##zan', 't', '.', 'and', 'bu', '##zan', 'b', '.', '(', '1999', ',', 'des', '##sin', '##e', '-', 'moi', 'l', \"'\", 'intelligence', '.', 'paris', ':', 'les', 'editions', 'd', \"'\", 'organisation', '.', ')', ',', 'the', 'mind', 'map', '(', 'or', 'he', '##uri', '##stic', 'diagram', ')', 'is', 'a', 'graphic', 'representation', 'technique', 'that', 'follows', 'the', 'natural', 'functioning', 'of', 'the', 'mind', 'and', 'allows', 'the', 'brain', \"'\", 's', 'potential', 'to', 'be', 'released', '.', 'cf', 'annex', '##1', 'this', 'tool', 'has', 'many', 'advantages', ':', '•', 'it', 'is', 'accessible', 'to', 'all', 'and', 'does', 'not', 'require', 'significant', 'material', 'investment', 'and', 'can', 'be', 'done', 'quickly', '•', 'it', 'is', 'scala', '##ble', '•', 'it', 'allows', 'cat', '##ego', '##rization', 'and', 'linking', 'of', 'information', '•', 'it', 'can', 'be', 'applied', 'to', 'any', 'type', 'of', 'situation', ':', 'note', '##taking', ',', 'problem', 'solving', ',', 'analysis', ',', 'creation', 'of', 'new', 'ideas', '•', 'it', 'is', 'suitable', 'for', 'all', 'people', 'and', 'is', 'easy', 'to', 'learn', '•', 'it', 'is', 'fun', 'and', 'encourages', 'exchanges', '•', 'it', 'makes', 'visible', 'the', 'dimension', 'of', 'projects', ',', 'opportunities', ',', 'inter', '##con', '##ne', '##ctions', '•', 'it', 'synth', '##es', '##izes', '•', 'it', 'makes', 'the', 'project', 'understand', '##able', '•', 'it', 'allows', 'you', 'to', 'explore', 'ideas', 'the', 'creation', 'of', 'a', 'mind', 'map', 'starts', 'with', 'an', 'idea', '/', 'problem', 'located', 'at', 'its', 'center', '.', 'this', 'starting', 'point', 'generates', 'ideas', '/', 'work', 'areas', ',', 'inc', '##rem', '##ented', 'around', 'this', 'center', 'in', 'a', 'radial', 'structure', ',', 'which', 'in', 'turn', 'is', 'completed', 'with', 'as', 'many', 'branches', 'as', 'new', 'ideas', '.', 'this', 'tool', 'enables', 'creativity', 'and', 'logic', 'to', 'be', 'mobilized', ',', 'it', 'is', 'a', 'map', 'of', 'the', 'thoughts', '.', 'creativity', 'is', 'enhanced', 'because', 'participants', 'feel', 'comfortable', 'with', 'the', 'method', '.', 'application', '&', 'insight', 'i', 'start', 'the', 'process', 'of', 'the', 'mind', 'map', 'creation', 'with', 'the', 'stakeholders', 'standing', 'around', 'a', 'large', 'board', '(', 'white', 'or', 'paper', 'board', ')', '.', 'in', 'the', 'center', 'of', 'the', 'board', ',', 'i', 'write', 'and', 'highlight', 'the', 'topic', 'to', 'design', '.', 'through', 'a', 'series', 'of', 'questions', ',', 'i', 'guide', 'the', 'stakeholders', 'in', 'modelling', 'the', 'mind', 'map', '.', 'i', 'adapt', 'the', 'series', 'of', 'questions', 'according', 'to', 'the', 'topic', 'to', 'be', 'addressed', '.', 'in', 'the', 'type', 'of', 'questions', ',', 'we', 'can', 'use', ':', 'who', ',', 'what', ',', 'when', ',', 'where', ',', 'why', ',', 'how', ',', 'how', 'much', '.', 'the', 'use', 'of', 'the', '“', 'why', '”', 'is', 'very', 'interesting', 'to', 'understand', 'the', 'origin', '.', 'by', 'this', 'way', ',', 'the', 'interviewed', 'person', 'free', '##s', 'itself', 'from', 'paradigm', '##s', 'and', 'thus', 'dare', '##s', 'to', 'propose', 'new', 'ideas', '/', 'ways', 'of', 'functioning', '.', 'i', 'plan', 'two', 'hours', 'for', 'a', 'workshop', '.', 'design', 'thinking', 'for', 'innovation', 'reflex', '##ion', '-', 'av', '##ril', '2021', '-', 'nat', '##hal', '##ie', 'sy', '##lla', 'after', 'modelling', 'the', 'mind', 'map', 'on', 'paper', ',', 'i', 'propose', 'to', 'the', 'participants', 'a', 'digital', 'visual', '##ization', 'of', 'their', 'work', 'with', 'the', 'addition', 'of', 'color', 'codes', ',', 'images', 'and', 'inter', '##con', '##ne', '##ctions', '.', 'this', 'second', 'workshop', 'also', 'lasts', 'two', 'hours', 'and', 'allows', 'the', 'mind', 'map', 'to', 'evolve', '.', 'once', 'familiar', '##ized', 'with', 'it', ',', 'the', 'stakeholders', 'discover', 'the', 'power', 'of', 'the', 'tool', '.', 'then', ',', 'the', 'second', 'workshop', 'brings', 'out', 'even', 'more', 'ideas', 'and', 'constructive', 'exchanges', 'between', 'the', 'stakeholders', '.', 'around', 'this', 'new', 'mind', 'map', ',', 'they', 'have', 'learned', 'to', 'work', 'together', 'and', 'want', 'to', 'make', 'visible', 'the', 'unto', '##ld', 'ideas', '.', 'i', 'now', 'present', 'all', 'the', 'projects', 'i', 'manage', 'in', 'this', 'type', 'of', 'format', 'in', 'order', 'to', 'ease', 'rapid', 'understanding', 'for', 'decision', '-', 'makers', '.', 'these', 'presentations', 'are', 'the', 'core', 'of', 'my', 'business', 'models', '.', 'the', 'decision', '-', 'makers', 'are', 'thus', 'able', 'to', 'identify', 'the', 'opportunities', 'of', 'the', 'projects', 'and', 'can', 'take', 'quick', 'decisions', 'to', 'valid', '##ate', 'them', '.', 'they', 'find', 'answers', 'to', 'their', 'questions', 'thank', 'to', 'a', 'sc', '##hema', '##tic', 'representation', '.', 'approach', 'what', 'i', 'find', 'amazing', 'with', 'the', 'fa', '##ci', '##lita', '##tion', 'of', 'this', 'type', 'of', 'workshop', 'is', 'the', 'participants', 'commitment', 'for', 'the', 'project', '.', 'this', 'tool', 'helps', 'to', 'give', 'meaning', '.', 'the', 'participants', 'appropriate', 'the', 'story', 'and', 'want', 'to', 'keep', 'writing', 'it', '.', 'then', ',', 'they', 'easily', 'become', 'actors', 'or', 'sponsors', 'of', 'the', 'project', '.', 'a', 'trust', 'relationship', 'is', 'built', ',', 'thus', 'facilitating', 'the', 'implementation', 'of', 'related', 'actions', '.', 'design', 'thinking', 'for', 'innovation', 'reflex', '##ion', '-', 'av', '##ril', '2021', '-', 'nat', '##hal', '##ie', 'sy', '##lla', 'annex', '1', ':', 'mind', 'map', 'shared', 'facilities', 'project', '[SEP]']\n",
            "Tokens from Original Tokens: ['[CLS]', 'design', 'thinking', 'for', 'innovation', 'reflex', '##ion', '-', 'av', '##ril', '2021', '-', 'nat', '##hal', '##ie', 'sy', '##lla', 'challenge', '&', 'selection', 'the', 'tool', 'i', 'use', 'to', 'help', 'all', 'stakeholders', 'finding', 'their', 'way', 'through', 'the', 'complexity', 'of', 'a', 'project', 'is', 'the', 'mind', 'map', '.', 'what', 'exactly', 'is', 'a', 'mind', 'map', '?', 'according', 'to', 'the', 'definition', 'of', 'bu', '##zan', 't', '.', 'and', 'bu', '##zan', 'b', '.', '(', '1999', ',', 'des', '##sin', '##e', '-', 'moi', 'l', \"'\", 'intelligence', '.', 'paris', ':', 'les', 'editions', 'd', \"'\", 'organisation', '.', ')', ',', 'the', 'mind', 'map', '(', 'or', 'he', '##uri', '##stic', 'diagram', ')', 'is', 'a', 'graphic', 'representation', 'technique', 'that', 'follows', 'the', 'natural', 'functioning', 'of', 'the', 'mind', 'and', 'allows', 'the', 'brain', \"'\", 's', 'potential', 'to', 'be', 'released', '.', 'cf', 'annex', '##1', 'this', 'tool', 'has', 'many', 'advantages', ':', '•', 'it', 'is', 'accessible', 'to', 'all', 'and', 'does', 'not', 'require', 'significant', 'material', 'investment', 'and', 'can', 'be', 'done', 'quickly', '•', 'it', 'is', 'scala', '##ble', '•', 'it', 'allows', 'cat', '##ego', '##rization', 'and', 'linking', 'of', 'information', '•', 'it', 'can', 'be', 'applied', 'to', 'any', 'type', 'of', 'situation', ':', 'note', '##taking', ',', 'problem', 'solving', ',', 'analysis', ',', 'creation', 'of', 'new', 'ideas', '•', 'it', 'is', 'suitable', 'for', 'all', 'people', 'and', 'is', 'easy', 'to', 'learn', '•', 'it', 'is', 'fun', 'and', 'encourages', 'exchanges', '•', 'it', 'makes', 'visible', 'the', 'dimension', 'of', 'projects', ',', 'opportunities', ',', 'inter', '##con', '##ne', '##ctions', '•', 'it', 'synth', '##es', '##izes', '•', 'it', 'makes', 'the', 'project', 'understand', '##able', '•', 'it', 'allows', 'you', 'to', 'explore', 'ideas', 'the', 'creation', 'of', 'a', 'mind', 'map', 'starts', 'with', 'an', 'idea', '/', 'problem', 'located', 'at', 'its', 'center', '.', 'this', 'starting', 'point', 'generates', 'ideas', '/', 'work', 'areas', ',', 'inc', '##rem', '##ented', 'around', 'this', 'center', 'in', 'a', 'radial', 'structure', ',', 'which', 'in', 'turn', 'is', 'completed', 'with', 'as', 'many', 'branches', 'as', 'new', 'ideas', '.', 'this', 'tool', 'enables', 'creativity', 'and', 'logic', 'to', 'be', 'mobilized', ',', 'it', 'is', 'a', 'map', 'of', 'the', 'thoughts', '.', 'creativity', 'is', 'enhanced', 'because', 'participants', 'feel', 'comfortable', 'with', 'the', 'method', '.', 'application', '&', 'insight', 'i', 'start', 'the', 'process', 'of', 'the', 'mind', 'map', 'creation', 'with', 'the', 'stakeholders', 'standing', 'around', 'a', 'large', 'board', '(', 'white', 'or', 'paper', 'board', ')', '.', 'in', 'the', 'center', 'of', 'the', 'board', ',', 'i', 'write', 'and', 'highlight', 'the', 'topic', 'to', 'design', '.', 'through', 'a', 'series', 'of', 'questions', ',', 'i', 'guide', 'the', 'stakeholders', 'in', 'modelling', 'the', 'mind', 'map', '.', 'i', 'adapt', 'the', 'series', 'of', 'questions', 'according', 'to', 'the', 'topic', 'to', 'be', 'addressed', '.', 'in', 'the', 'type', 'of', 'questions', ',', 'we', 'can', 'use', ':', 'who', ',', 'what', ',', 'when', ',', 'where', ',', 'why', ',', 'how', ',', 'how', 'much', '.', 'the', 'use', 'of', 'the', '“', 'why', '”', 'is', 'very', 'interesting', 'to', 'understand', 'the', 'origin', '.', 'by', 'this', 'way', ',', 'the', 'interviewed', 'person', 'free', '##s', 'itself', 'from', 'paradigm', '##s', 'and', 'thus', 'dare', '##s', 'to', 'propose', 'new', 'ideas', '/', 'ways', 'of', 'functioning', '.', 'i', 'plan', 'two', 'hours', 'for', 'a', 'workshop', '.', 'design', 'thinking', 'for', 'innovation', 'reflex', '##ion', '-', 'av', '##ril', '2021', '-', 'nat', '##hal', '##ie', 'sy', '##lla', 'after', 'modelling', 'the', 'mind', 'map', 'on', 'paper', ',', 'i', 'propose', 'to', 'the', 'participants', 'a', 'digital', 'visual', '##ization', 'of', 'their', 'work', 'with', 'the', 'addition', 'of', 'color', 'codes', ',', 'images', 'and', 'inter', '##con', '##ne', '##ctions', '.', 'this', 'second', 'workshop', 'also', 'lasts', 'two', 'hours', 'and', 'allows', 'the', 'mind', 'map', 'to', 'evolve', '.', 'once', 'familiar', '##ized', 'with', 'it', ',', 'the', 'stakeholders', 'discover', 'the', 'power', 'of', 'the', 'tool', '.', 'then', ',', 'the', 'second', 'workshop', 'brings', 'out', 'even', 'more', 'ideas', 'and', 'constructive', 'exchanges', 'between', 'the', 'stakeholders', '.', 'around', 'this', 'new', 'mind', 'map', ',', 'they', 'have', 'learned', 'to', 'work', 'together', 'and', 'want', 'to', 'make', 'visible', 'the', 'unto', '##ld', 'ideas', '.', 'i', 'now', 'present', 'all', 'the', 'projects', 'i', 'manage', 'in', 'this', 'type', 'of', 'format', 'in', 'order', 'to', 'ease', 'rapid', 'understanding', 'for', 'decision', '-', 'makers', '.', 'these', 'presentations', 'are', 'the', 'core', 'of', 'my', 'business', 'models', '.', 'the', 'decision', '-', 'makers', 'are', 'thus', 'able', 'to', 'identify', 'the', 'opportunities', 'of', 'the', 'projects', 'and', 'can', 'take', 'quick', 'decisions', 'to', 'valid', '##ate', 'them', '.', 'they', 'find', 'answers', 'to', 'their', 'questions', 'thank', 'to', 'a', 'sc', '##hema', '##tic', 'representation', '.', 'approach', 'what', 'i', 'find', 'amazing', 'with', 'the', 'fa', '##ci', '##lita', '##tion', 'of', 'this', 'type', 'of', 'workshop', 'is', 'the', 'participants', 'commitment', 'for', 'the', 'project', '.', 'this', 'tool', 'helps', 'to', 'give', 'meaning', '.', 'the', 'participants', 'appropriate', 'the', 'story', 'and', 'want', 'to', 'keep', 'writing', 'it', '.', 'then', ',', 'they', 'easily', 'become', 'actors', 'or', 'sponsors', 'of', 'the', 'project', '.', 'a', 'trust', 'relationship', 'is', 'built', ',', 'thus', 'facilitating', 'the', 'implementation', 'of', 'related', 'actions', '.', 'design', 'thinking', 'for', 'innovation', 'reflex', '##ion', '-', 'av', '##ril', '2021', '-', 'nat', '##hal', '##ie', 'sy', '##lla', 'annex', '1', ':', 'mind', 'map', 'shared', 'facilities', 'project', '[SEP]']\n",
            "Alignment is needed.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install datasets\n",
        "from transformers import AutoTokenizer, AutoModelForTokenClassification, TrainingArguments, Trainer\n",
        "from datasets import Dataset, DatasetDict"
      ],
      "metadata": {
        "id": "G04qap6xjfb6",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "a7f9c0ee-292f-419a-9ca7-48320100046a"
      },
      "id": "G04qap6xjfb6",
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: datasets in /usr/local/lib/python3.10/dist-packages (2.16.1)\n",
            "Requirement already satisfied: filelock in /usr/local/lib/python3.10/dist-packages (from datasets) (3.13.1)\n",
            "Requirement already satisfied: numpy>=1.17 in /usr/local/lib/python3.10/dist-packages (from datasets) (1.23.5)\n",
            "Requirement already satisfied: pyarrow>=8.0.0 in /usr/local/lib/python3.10/dist-packages (from datasets) (10.0.1)\n",
            "Requirement already satisfied: pyarrow-hotfix in /usr/local/lib/python3.10/dist-packages (from datasets) (0.6)\n",
            "Requirement already satisfied: dill<0.3.8,>=0.3.0 in /usr/local/lib/python3.10/dist-packages (from datasets) (0.3.7)\n",
            "Requirement already satisfied: pandas in /usr/local/lib/python3.10/dist-packages (from datasets) (1.5.3)\n",
            "Requirement already satisfied: requests>=2.19.0 in /usr/local/lib/python3.10/dist-packages (from datasets) (2.31.0)\n",
            "Requirement already satisfied: tqdm>=4.62.1 in /usr/local/lib/python3.10/dist-packages (from datasets) (4.66.1)\n",
            "Requirement already satisfied: xxhash in /usr/local/lib/python3.10/dist-packages (from datasets) (3.4.1)\n",
            "Requirement already satisfied: multiprocess in /usr/local/lib/python3.10/dist-packages (from datasets) (0.70.15)\n",
            "Requirement already satisfied: fsspec[http]<=2023.10.0,>=2023.1.0 in /usr/local/lib/python3.10/dist-packages (from datasets) (2023.6.0)\n",
            "Requirement already satisfied: aiohttp in /usr/local/lib/python3.10/dist-packages (from datasets) (3.9.3)\n",
            "Requirement already satisfied: huggingface-hub>=0.19.4 in /usr/local/lib/python3.10/dist-packages (from datasets) (0.20.3)\n",
            "Requirement already satisfied: packaging in /usr/local/lib/python3.10/dist-packages (from datasets) (23.2)\n",
            "Requirement already satisfied: pyyaml>=5.1 in /usr/local/lib/python3.10/dist-packages (from datasets) (6.0.1)\n",
            "Requirement already satisfied: aiosignal>=1.1.2 in /usr/local/lib/python3.10/dist-packages (from aiohttp->datasets) (1.3.1)\n",
            "Requirement already satisfied: attrs>=17.3.0 in /usr/local/lib/python3.10/dist-packages (from aiohttp->datasets) (23.2.0)\n",
            "Requirement already satisfied: frozenlist>=1.1.1 in /usr/local/lib/python3.10/dist-packages (from aiohttp->datasets) (1.4.1)\n",
            "Requirement already satisfied: multidict<7.0,>=4.5 in /usr/local/lib/python3.10/dist-packages (from aiohttp->datasets) (6.0.4)\n",
            "Requirement already satisfied: yarl<2.0,>=1.0 in /usr/local/lib/python3.10/dist-packages (from aiohttp->datasets) (1.9.4)\n",
            "Requirement already satisfied: async-timeout<5.0,>=4.0 in /usr/local/lib/python3.10/dist-packages (from aiohttp->datasets) (4.0.3)\n",
            "Requirement already satisfied: typing-extensions>=3.7.4.3 in /usr/local/lib/python3.10/dist-packages (from huggingface-hub>=0.19.4->datasets) (4.5.0)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests>=2.19.0->datasets) (3.3.2)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests>=2.19.0->datasets) (3.6)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests>=2.19.0->datasets) (2.0.7)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests>=2.19.0->datasets) (2023.11.17)\n",
            "Requirement already satisfied: python-dateutil>=2.8.1 in /usr/local/lib/python3.10/dist-packages (from pandas->datasets) (2.8.2)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas->datasets) (2023.4)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil>=2.8.1->pandas->datasets) (1.16.0)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dataset = Dataset.from_pandas(pd.DataFrame(df))"
      ],
      "metadata": {
        "id": "0vsOPXVsjfjw"
      },
      "id": "0vsOPXVsjfjw",
      "execution_count": 26,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Get the unique labels from the dataset\n",
        "unique_labels = set(label for doc_labels in dataset['labels'] for label in doc_labels)\n",
        "# Create the label to id mapping\n",
        "label_to_id = {label: id for id, label in enumerate(unique_labels)}"
      ],
      "metadata": {
        "id": "OzgKK-OlYduG"
      },
      "id": "OzgKK-OlYduG",
      "execution_count": 27,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from transformers import AutoTokenizer\n",
        "\n",
        "tokenizer = AutoTokenizer.from_pretrained('bert-base-uncased')\n",
        "\n",
        "# Define a function that will tokenize the text and map the labels onto the tokenized text\n",
        "def tokenize_and_align_labels(examples):\n",
        "    tokenized_inputs = tokenizer(examples['tokens'], truncation=True, padding='max_length', is_split_into_words=True)\n",
        "    labels = []\n",
        "    for i, label in enumerate(examples['labels']):\n",
        "        word_ids = tokenized_inputs.word_ids(batch_index=i)\n",
        "        previous_word_idx = None\n",
        "        label_ids = []\n",
        "        for word_idx in word_ids:\n",
        "            if word_idx is None:\n",
        "                label_ids.append(-100)\n",
        "            elif word_idx != previous_word_idx:\n",
        "                label_ids.append(label_to_id[label[word_idx]])\n",
        "            else:\n",
        "                label_ids.append(-100)\n",
        "            previous_word_idx = word_idx\n",
        "        labels.append(label_ids)\n",
        "    tokenized_inputs['labels'] = labels\n",
        "    return tokenized_inputs\n",
        "\n",
        "# Apply the tokenization and label alignment function to your dataset\n",
        "tokenized_and_aligned_datasets = dataset.map(tokenize_and_align_labels, batched=True)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 49,
          "referenced_widgets": [
            "832734a83b0f4922bd9a91b333a6f180",
            "037d2e261de14b3da96c4161490dbb20",
            "5f493c3117844e38900a9d17fee14b7f",
            "c647bbe8c0874258b5821462a6485edf",
            "e71c29be7d444eb0bf05e1506801c820",
            "6833ba80f9724aa6bfe668972af0c08f",
            "8645b9e98cdc4fa3bcb2b12e794513e7",
            "769f7c744fbb49ce9a7c70d302289107",
            "f34459b389564f7695f4510d94b8af9d",
            "b5d72ac126254ec5ab181b16afc860d1",
            "79e4f8a3538f469bb2e97214c9697a31"
          ]
        },
        "id": "AplVaLIPCMQL",
        "outputId": "69dabff0-bc00-4620-d938-24dffd8212b5"
      },
      "id": "AplVaLIPCMQL",
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Map:   0%|          | 0/6807 [00:00<?, ? examples/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "832734a83b0f4922bd9a91b333a6f180"
            }
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from datasets import DatasetDict\n",
        "\n",
        "# Split the dataset into a training and validation set\n",
        "train_test_split = tokenized_and_aligned_datasets.train_test_split(test_size=0.1)\n",
        "dataset_dict = DatasetDict({\n",
        "    'train': train_test_split['train'],\n",
        "    'validation': train_test_split['test']\n",
        "})"
      ],
      "metadata": {
        "id": "krUBGuTwG0mM"
      },
      "id": "krUBGuTwG0mM",
      "execution_count": 29,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from transformers import AutoModelForTokenClassification\n",
        "\n",
        "model = AutoModelForTokenClassification.from_pretrained('bert-base-uncased', num_labels=len(unique_labels))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "tu0F0ZR6ITMW",
        "outputId": "cd5e29fa-e1fa-40e8-8e1c-2dcc152bb21c"
      },
      "id": "tu0F0ZR6ITMW",
      "execution_count": 30,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Some weights of BertForTokenClassification were not initialized from the model checkpoint at bert-base-uncased and are newly initialized: ['classifier.bias', 'classifier.weight']\n",
            "You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from transformers import TrainingArguments\n",
        "\n",
        "training_args = TrainingArguments(\n",
        "    output_dir='./results',\n",
        "    num_train_epochs=3,\n",
        "    per_device_train_batch_size=8,\n",
        "    warmup_steps=500,\n",
        "    weight_decay=0.01,\n",
        "    logging_dir='./logs',\n",
        "    logging_steps=10,\n",
        ")\n"
      ],
      "metadata": {
        "id": "z6BHEYacIV_6"
      },
      "id": "z6BHEYacIV_6",
      "execution_count": 31,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from transformers import Trainer\n",
        "\n",
        "trainer = Trainer(\n",
        "    model=model,\n",
        "    args=training_args,\n",
        "    train_dataset=dataset_dict['train'],\n",
        "    eval_dataset=dataset_dict['validation'],\n",
        "    tokenizer=tokenizer\n",
        ")\n",
        "\n",
        "trainer.train()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "JjAXJ_1yIYRN",
        "outputId": "0bf4dc7a-c41a-454f-a544-9faed0bb00bd"
      },
      "id": "JjAXJ_1yIYRN",
      "execution_count": 32,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "    <div>\n",
              "      \n",
              "      <progress value='2298' max='2298' style='width:300px; height:20px; vertical-align: middle;'></progress>\n",
              "      [2298/2298 30:20, Epoch 3/3]\n",
              "    </div>\n",
              "    <table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              " <tr style=\"text-align: left;\">\n",
              "      <th>Step</th>\n",
              "      <th>Training Loss</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <td>10</td>\n",
              "      <td>2.658400</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>20</td>\n",
              "      <td>2.483400</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>30</td>\n",
              "      <td>2.129400</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>40</td>\n",
              "      <td>1.523300</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>50</td>\n",
              "      <td>0.594000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>60</td>\n",
              "      <td>0.114400</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>70</td>\n",
              "      <td>0.020700</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>80</td>\n",
              "      <td>0.011100</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>90</td>\n",
              "      <td>0.007500</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>100</td>\n",
              "      <td>0.005600</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>110</td>\n",
              "      <td>0.008000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>120</td>\n",
              "      <td>0.012900</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>130</td>\n",
              "      <td>0.008500</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>140</td>\n",
              "      <td>0.013800</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>150</td>\n",
              "      <td>0.009200</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>160</td>\n",
              "      <td>0.004900</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>170</td>\n",
              "      <td>0.006000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>180</td>\n",
              "      <td>0.005600</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>190</td>\n",
              "      <td>0.007200</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>200</td>\n",
              "      <td>0.005200</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>210</td>\n",
              "      <td>0.006900</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>220</td>\n",
              "      <td>0.004900</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>230</td>\n",
              "      <td>0.008000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>240</td>\n",
              "      <td>0.008900</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>250</td>\n",
              "      <td>0.004300</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>260</td>\n",
              "      <td>0.002900</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>270</td>\n",
              "      <td>0.007400</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>280</td>\n",
              "      <td>0.006500</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>290</td>\n",
              "      <td>0.003600</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>300</td>\n",
              "      <td>0.004000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>310</td>\n",
              "      <td>0.002200</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>320</td>\n",
              "      <td>0.003100</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>330</td>\n",
              "      <td>0.003200</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>340</td>\n",
              "      <td>0.001200</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>350</td>\n",
              "      <td>0.002800</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>360</td>\n",
              "      <td>0.003400</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>370</td>\n",
              "      <td>0.006300</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>380</td>\n",
              "      <td>0.004000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>390</td>\n",
              "      <td>0.005100</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>400</td>\n",
              "      <td>0.002100</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>410</td>\n",
              "      <td>0.001100</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>420</td>\n",
              "      <td>0.002000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>430</td>\n",
              "      <td>0.001400</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>440</td>\n",
              "      <td>0.001100</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>450</td>\n",
              "      <td>0.000700</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>460</td>\n",
              "      <td>0.001700</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>470</td>\n",
              "      <td>0.001200</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>480</td>\n",
              "      <td>0.002900</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>490</td>\n",
              "      <td>0.003600</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>500</td>\n",
              "      <td>0.002000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>510</td>\n",
              "      <td>0.002300</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>520</td>\n",
              "      <td>0.001100</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>530</td>\n",
              "      <td>0.001000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>540</td>\n",
              "      <td>0.001200</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>550</td>\n",
              "      <td>0.000500</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>560</td>\n",
              "      <td>0.000800</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>570</td>\n",
              "      <td>0.001100</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>580</td>\n",
              "      <td>0.000800</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>590</td>\n",
              "      <td>0.000800</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>600</td>\n",
              "      <td>0.001000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>610</td>\n",
              "      <td>0.001500</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>620</td>\n",
              "      <td>0.001200</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>630</td>\n",
              "      <td>0.001300</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>640</td>\n",
              "      <td>0.000600</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>650</td>\n",
              "      <td>0.000700</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>660</td>\n",
              "      <td>0.000800</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>670</td>\n",
              "      <td>0.000400</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>680</td>\n",
              "      <td>0.000500</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>690</td>\n",
              "      <td>0.000300</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>700</td>\n",
              "      <td>0.000500</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>710</td>\n",
              "      <td>0.003100</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>720</td>\n",
              "      <td>0.001300</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>730</td>\n",
              "      <td>0.001000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>740</td>\n",
              "      <td>0.000700</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>750</td>\n",
              "      <td>0.002900</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>760</td>\n",
              "      <td>0.001100</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>770</td>\n",
              "      <td>0.001100</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>780</td>\n",
              "      <td>0.000800</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>790</td>\n",
              "      <td>0.000700</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>800</td>\n",
              "      <td>0.002200</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>810</td>\n",
              "      <td>0.001000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>820</td>\n",
              "      <td>0.000700</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>830</td>\n",
              "      <td>0.000900</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>840</td>\n",
              "      <td>0.000400</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>850</td>\n",
              "      <td>0.000600</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>860</td>\n",
              "      <td>0.001100</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>870</td>\n",
              "      <td>0.000600</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>880</td>\n",
              "      <td>0.000500</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>890</td>\n",
              "      <td>0.000800</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>900</td>\n",
              "      <td>0.002100</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>910</td>\n",
              "      <td>0.000700</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>920</td>\n",
              "      <td>0.000300</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>930</td>\n",
              "      <td>0.000800</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>940</td>\n",
              "      <td>0.000400</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>950</td>\n",
              "      <td>0.000400</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>960</td>\n",
              "      <td>0.000600</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>970</td>\n",
              "      <td>0.000400</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>980</td>\n",
              "      <td>0.000600</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>990</td>\n",
              "      <td>0.000400</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>1000</td>\n",
              "      <td>0.001000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>1010</td>\n",
              "      <td>0.000700</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>1020</td>\n",
              "      <td>0.000400</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>1030</td>\n",
              "      <td>0.000600</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>1040</td>\n",
              "      <td>0.000800</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>1050</td>\n",
              "      <td>0.000600</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>1060</td>\n",
              "      <td>0.001000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>1070</td>\n",
              "      <td>0.000500</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>1080</td>\n",
              "      <td>0.000800</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>1090</td>\n",
              "      <td>0.000800</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>1100</td>\n",
              "      <td>0.000400</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>1110</td>\n",
              "      <td>0.000700</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>1120</td>\n",
              "      <td>0.000600</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>1130</td>\n",
              "      <td>0.001000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>1140</td>\n",
              "      <td>0.000900</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>1150</td>\n",
              "      <td>0.000400</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>1160</td>\n",
              "      <td>0.000600</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>1170</td>\n",
              "      <td>0.000400</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>1180</td>\n",
              "      <td>0.000400</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>1190</td>\n",
              "      <td>0.000300</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>1200</td>\n",
              "      <td>0.001100</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>1210</td>\n",
              "      <td>0.000900</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>1220</td>\n",
              "      <td>0.000400</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>1230</td>\n",
              "      <td>0.001200</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>1240</td>\n",
              "      <td>0.000800</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>1250</td>\n",
              "      <td>0.002000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>1260</td>\n",
              "      <td>0.001100</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>1270</td>\n",
              "      <td>0.000700</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>1280</td>\n",
              "      <td>0.000600</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>1290</td>\n",
              "      <td>0.000800</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>1300</td>\n",
              "      <td>0.001000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>1310</td>\n",
              "      <td>0.000900</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>1320</td>\n",
              "      <td>0.000300</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>1330</td>\n",
              "      <td>0.000300</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>1340</td>\n",
              "      <td>0.000600</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>1350</td>\n",
              "      <td>0.000200</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>1360</td>\n",
              "      <td>0.000600</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>1370</td>\n",
              "      <td>0.000200</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>1380</td>\n",
              "      <td>0.000900</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>1390</td>\n",
              "      <td>0.000300</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>1400</td>\n",
              "      <td>0.000300</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>1410</td>\n",
              "      <td>0.000100</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>1420</td>\n",
              "      <td>0.000300</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>1430</td>\n",
              "      <td>0.000200</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>1440</td>\n",
              "      <td>0.000500</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>1450</td>\n",
              "      <td>0.000500</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>1460</td>\n",
              "      <td>0.001200</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>1470</td>\n",
              "      <td>0.000700</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>1480</td>\n",
              "      <td>0.000500</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>1490</td>\n",
              "      <td>0.000500</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>1500</td>\n",
              "      <td>0.000600</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>1510</td>\n",
              "      <td>0.000200</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>1520</td>\n",
              "      <td>0.000600</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>1530</td>\n",
              "      <td>0.000300</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>1540</td>\n",
              "      <td>0.001900</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>1550</td>\n",
              "      <td>0.000500</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>1560</td>\n",
              "      <td>0.000200</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>1570</td>\n",
              "      <td>0.000500</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>1580</td>\n",
              "      <td>0.000300</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>1590</td>\n",
              "      <td>0.000100</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>1600</td>\n",
              "      <td>0.000100</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>1610</td>\n",
              "      <td>0.001000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>1620</td>\n",
              "      <td>0.000200</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>1630</td>\n",
              "      <td>0.000500</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>1640</td>\n",
              "      <td>0.000200</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>1650</td>\n",
              "      <td>0.000200</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>1660</td>\n",
              "      <td>0.001000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>1670</td>\n",
              "      <td>0.000300</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>1680</td>\n",
              "      <td>0.000300</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>1690</td>\n",
              "      <td>0.000400</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>1700</td>\n",
              "      <td>0.000200</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>1710</td>\n",
              "      <td>0.000600</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>1720</td>\n",
              "      <td>0.000200</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>1730</td>\n",
              "      <td>0.000200</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>1740</td>\n",
              "      <td>0.000600</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>1750</td>\n",
              "      <td>0.000400</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>1760</td>\n",
              "      <td>0.000200</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>1770</td>\n",
              "      <td>0.000600</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>1780</td>\n",
              "      <td>0.000200</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>1790</td>\n",
              "      <td>0.000100</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>1800</td>\n",
              "      <td>0.000200</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>1810</td>\n",
              "      <td>0.000300</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>1820</td>\n",
              "      <td>0.000100</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>1830</td>\n",
              "      <td>0.000100</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>1840</td>\n",
              "      <td>0.000200</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>1850</td>\n",
              "      <td>0.000300</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>1860</td>\n",
              "      <td>0.000400</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>1870</td>\n",
              "      <td>0.000100</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>1880</td>\n",
              "      <td>0.000100</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>1890</td>\n",
              "      <td>0.000100</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>1900</td>\n",
              "      <td>0.000400</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>1910</td>\n",
              "      <td>0.000300</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>1920</td>\n",
              "      <td>0.000400</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>1930</td>\n",
              "      <td>0.000300</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>1940</td>\n",
              "      <td>0.000300</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>1950</td>\n",
              "      <td>0.000100</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>1960</td>\n",
              "      <td>0.000300</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>1970</td>\n",
              "      <td>0.000400</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>1980</td>\n",
              "      <td>0.000200</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>1990</td>\n",
              "      <td>0.000900</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>2000</td>\n",
              "      <td>0.000200</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>2010</td>\n",
              "      <td>0.000600</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>2020</td>\n",
              "      <td>0.000200</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>2030</td>\n",
              "      <td>0.000400</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>2040</td>\n",
              "      <td>0.000200</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>2050</td>\n",
              "      <td>0.000400</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>2060</td>\n",
              "      <td>0.000100</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>2070</td>\n",
              "      <td>0.000100</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>2080</td>\n",
              "      <td>0.000300</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>2090</td>\n",
              "      <td>0.000200</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>2100</td>\n",
              "      <td>0.000400</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>2110</td>\n",
              "      <td>0.000500</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>2120</td>\n",
              "      <td>0.000300</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>2130</td>\n",
              "      <td>0.000500</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>2140</td>\n",
              "      <td>0.000200</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>2150</td>\n",
              "      <td>0.000100</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>2160</td>\n",
              "      <td>0.000100</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>2170</td>\n",
              "      <td>0.000900</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>2180</td>\n",
              "      <td>0.000500</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>2190</td>\n",
              "      <td>0.000100</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>2200</td>\n",
              "      <td>0.000100</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>2210</td>\n",
              "      <td>0.000200</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>2220</td>\n",
              "      <td>0.000200</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>2230</td>\n",
              "      <td>0.000100</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>2240</td>\n",
              "      <td>0.000200</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>2250</td>\n",
              "      <td>0.000300</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>2260</td>\n",
              "      <td>0.000300</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>2270</td>\n",
              "      <td>0.000400</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>2280</td>\n",
              "      <td>0.000200</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>2290</td>\n",
              "      <td>0.000300</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table><p>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "TrainOutput(global_step=2298, training_loss=0.04283603075971775, metrics={'train_runtime': 1823.8897, 'train_samples_per_second': 10.076, 'train_steps_per_second': 1.26, 'total_flos': 4802589366884352.0, 'train_loss': 0.04283603075971775, 'epoch': 3.0})"
            ]
          },
          "metadata": {},
          "execution_count": 32
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "<h1> Evaluation <h1>"
      ],
      "metadata": {
        "id": "pgL2Kaj0hAPY"
      },
      "id": "pgL2Kaj0hAPY"
    },
    {
      "cell_type": "code",
      "source": [
        "evaluation_results = trainer.evaluate(dataset_dict['validation'])\n",
        "print(evaluation_results)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 54
        },
        "id": "kJlup3q0hDRT",
        "outputId": "9d79d875-ce75-43bc-a3ce-b4d1322fa493"
      },
      "id": "kJlup3q0hDRT",
      "execution_count": 33,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "    <div>\n",
              "      \n",
              "      <progress value='86' max='86' style='width:300px; height:20px; vertical-align: middle;'></progress>\n",
              "      [86/86 00:22]\n",
              "    </div>\n",
              "    "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'eval_loss': 0.0009266905835829675, 'eval_runtime': 22.3205, 'eval_samples_per_second': 30.51, 'eval_steps_per_second': 3.853, 'epoch': 3.0}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 242
        },
        "id": "JvTe9yeyhvtC",
        "outputId": "d404612f-8fb7-4b1b-b4b5-de27f3e005d1"
      },
      "id": "JvTe9yeyhvtC",
      "execution_count": 34,
      "outputs": [
        {
          "output_type": "error",
          "ename": "AttributeError",
          "evalue": "'dict' object has no attribute 'predictions'",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-34-fd4681be7e7d>\u001b[0m in \u001b[0;36m<cell line: 4>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;31m# Assuming that evaluation_results contains the 'eval_predictions' and 'label_ids'\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m \u001b[0mpredictions\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mevaluation_results\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredictions\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      5\u001b[0m \u001b[0mlabels\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mevaluation_results\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlabel_ids\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mAttributeError\u001b[0m: 'dict' object has no attribute 'predictions'"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(evaluation_results)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "g0gsFRPCibZK",
        "outputId": "e671c7f4-8cca-45dc-9fc2-7def367b1b83"
      },
      "id": "g0gsFRPCibZK",
      "execution_count": 35,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'eval_loss': 0.0009266905835829675, 'eval_runtime': 22.3205, 'eval_samples_per_second': 30.51, 'eval_steps_per_second': 3.853, 'epoch': 3.0}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "GZDwuQgjih26"
      },
      "id": "GZDwuQgjih26",
      "execution_count": null,
      "outputs": []
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.9.16"
    },
    "colab": {
      "provenance": [],
      "gpuType": "T4",
      "include_colab_link": true
    },
    "widgets": {
      "application/vnd.jupyter.widget-state+json": {
        "832734a83b0f4922bd9a91b333a6f180": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_037d2e261de14b3da96c4161490dbb20",
              "IPY_MODEL_5f493c3117844e38900a9d17fee14b7f",
              "IPY_MODEL_c647bbe8c0874258b5821462a6485edf"
            ],
            "layout": "IPY_MODEL_e71c29be7d444eb0bf05e1506801c820"
          }
        },
        "037d2e261de14b3da96c4161490dbb20": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_6833ba80f9724aa6bfe668972af0c08f",
            "placeholder": "​",
            "style": "IPY_MODEL_8645b9e98cdc4fa3bcb2b12e794513e7",
            "value": "Map: 100%"
          }
        },
        "5f493c3117844e38900a9d17fee14b7f": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_769f7c744fbb49ce9a7c70d302289107",
            "max": 6807,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_f34459b389564f7695f4510d94b8af9d",
            "value": 6807
          }
        },
        "c647bbe8c0874258b5821462a6485edf": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_b5d72ac126254ec5ab181b16afc860d1",
            "placeholder": "​",
            "style": "IPY_MODEL_79e4f8a3538f469bb2e97214c9697a31",
            "value": " 6807/6807 [01:03&lt;00:00, 133.74 examples/s]"
          }
        },
        "e71c29be7d444eb0bf05e1506801c820": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "6833ba80f9724aa6bfe668972af0c08f": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "8645b9e98cdc4fa3bcb2b12e794513e7": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "769f7c744fbb49ce9a7c70d302289107": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "f34459b389564f7695f4510d94b8af9d": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "b5d72ac126254ec5ab181b16afc860d1": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "79e4f8a3538f469bb2e97214c9697a31": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        }
      }
    },
    "accelerator": "GPU"
  },
  "nbformat": 4,
  "nbformat_minor": 5
}